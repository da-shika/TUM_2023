#ifndef H1_APPLICATION_CLIENT_H_
#define H1_APPLICATION_CLIENT_H_

////////////////////////////////////////////////////////////////////////////////
// h1_hardware includes
////////////////////////////////////////////////////////////////////////////////
#include <tomm_hardware_interface/comm_interface.h>
#include <tomm_hardware_interface/tomm_interface.h>
#include <tomm_whole_body_controller/whole_body_controller.h>
// #include <h1_visualizer/visualizer.h>

////////////////////////////////////////////////////////////////////////////////
// ics_behavior includes
////////////////////////////////////////////////////////////////////////////////
#include <ics_behavior/behavior_manager.h>

////////////////////////////////////////////////////////////////////////////////
// control_core includes
////////////////////////////////////////////////////////////////////////////////
#include <control_core/interfaces/module_base.h>
#include <control_core/trajectory/state_trajectory.h>
#include <control_core/trajectory/state_trajectories.h>
#include <control_core/trajectory/polynomial_trajectories.h>

////////////////////////////////////////////////////////////////////////////////
// h1_core includes
////////////////////////////////////////////////////////////////////////////////
#include <tomm_core/GlobalParameters.h>

namespace tomm
{

  class App : public cc::ModuleBase
  {
    public:
      typedef cc::ModuleBase Base;
      typedef cc::JointStateSpline5 Trajectory;
      typedef tomm_core::GlobalParameters Params;

    private:
      //////////////////////////////////////////////////////////////////////////
      // parameters
      //////////////////////////////////////////////////////////////////////////
      Params params_;
      ros::Time time_start_;

      //////////////////////////////////////////////////////////////////////////
      // CommunicationInterface
      //////////////////////////////////////////////////////////////////////////
      CommunicationInterface& comm_interface_;

      //////////////////////////////////////////////////////////////////////////
      // homing spline
      //////////////////////////////////////////////////////////////////////////
      std::unique_ptr<Trajectory> spline_;

      //////////////////////////////////////////////////////////////////////////
      // tomm specific hardware interface
      //////////////////////////////////////////////////////////////////////////
      std::unique_ptr<tomm::TOMMInterface> hardware_interface_;

      //////////////////////////////////////////////////////////////////////////
      // tomm controller
      //////////////////////////////////////////////////////////////////////////
      std::shared_ptr<tomm::WholeBodyController> controller_;
      // std::shared_ptr<tomm::Visualizer> visualizer_;
      std::unique_ptr<ics::BehaviorManager> behavior_manager_;

      //////////////////////////////////////////////////////////////////////////
      // ros connections
      //////////////////////////////////////////////////////////////////////////
      ros::Publisher controller_start_pub_;

      ros::Publisher joint_state_pub_;
      sensor_msgs::JointState joint_state_msg_;

    public:
      App(CommunicationInterface& comm_interface, const std::string& name);
      virtual ~App();

    protected:
      virtual bool init(ros::NodeHandle& nh, cc::Parameters& params) override;

      virtual void start(const ros::Time &time) override;

      virtual bool update(const ros::Time &time, const ros::Duration &period) override;

      virtual void stop(const ros::Time &time) override;
  };

}

#endif
