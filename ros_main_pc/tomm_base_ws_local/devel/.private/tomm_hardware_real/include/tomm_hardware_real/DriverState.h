// Generated by gencpp from file tomm_hardware_real/DriverState.msg
// DO NOT EDIT!


#ifndef TOMM_HARDWARE_REAL_MESSAGE_DRIVERSTATE_H
#define TOMM_HARDWARE_REAL_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tomm_hardware_real
{
template <class ContainerAllocator>
struct DriverState_
{
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
    : position(0)
    , digital_inputs(0)
    , velocity(0)
    , status(0)  {
    }
  DriverState_(const ContainerAllocator& _alloc)
    : position(0)
    , digital_inputs(0)
    , velocity(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef int32_t _position_type;
  _position_type position;

   typedef uint32_t _digital_inputs_type;
  _digital_inputs_type digital_inputs;

   typedef int32_t _velocity_type;
  _velocity_type velocity;

   typedef uint16_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::tomm_hardware_real::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tomm_hardware_real::DriverState_<ContainerAllocator> const> ConstPtr;

}; // struct DriverState_

typedef ::tomm_hardware_real::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::tomm_hardware_real::DriverState > DriverStatePtr;
typedef boost::shared_ptr< ::tomm_hardware_real::DriverState const> DriverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tomm_hardware_real::DriverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tomm_hardware_real::DriverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tomm_hardware_real::DriverState_<ContainerAllocator1> & lhs, const ::tomm_hardware_real::DriverState_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.digital_inputs == rhs.digital_inputs &&
    lhs.velocity == rhs.velocity &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tomm_hardware_real::DriverState_<ContainerAllocator1> & lhs, const ::tomm_hardware_real::DriverState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tomm_hardware_real

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tomm_hardware_real::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tomm_hardware_real::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tomm_hardware_real::DriverState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4fed67ceab1a7997c41bd586c46cc74";
  }

  static const char* value(const ::tomm_hardware_real::DriverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4fed67ceab1a799ULL;
  static const uint64_t static_value2 = 0x7c41bd586c46cc74ULL;
};

template<class ContainerAllocator>
struct DataType< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tomm_hardware_real/DriverState";
  }

  static const char* value(const ::tomm_hardware_real::DriverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 position\n"
"uint32 digital_inputs\n"
"int32 velocity\n"
"uint16 status\n"
;
  }

  static const char* value(const ::tomm_hardware_real::DriverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.digital_inputs);
      stream.next(m.velocity);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tomm_hardware_real::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tomm_hardware_real::DriverState_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "digital_inputs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.digital_inputs);
    s << indent << "velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOMM_HARDWARE_REAL_MESSAGE_DRIVERSTATE_H
