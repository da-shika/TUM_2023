// Generated by gencpp from file tomm_hardware_real/OmniBaseState.msg
// DO NOT EDIT!


#ifndef TOMM_HARDWARE_REAL_MESSAGE_OMNIBASESTATE_H
#define TOMM_HARDWARE_REAL_MESSAGE_OMNIBASESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tomm_hardware_real/DriverState.h>

namespace tomm_hardware_real
{
template <class ContainerAllocator>
struct OmniBaseState_
{
  typedef OmniBaseState_<ContainerAllocator> Type;

  OmniBaseState_()
    : state()  {
    }
  OmniBaseState_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tomm_hardware_real::DriverState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tomm_hardware_real::DriverState_<ContainerAllocator> >> _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> const> ConstPtr;

}; // struct OmniBaseState_

typedef ::tomm_hardware_real::OmniBaseState_<std::allocator<void> > OmniBaseState;

typedef boost::shared_ptr< ::tomm_hardware_real::OmniBaseState > OmniBaseStatePtr;
typedef boost::shared_ptr< ::tomm_hardware_real::OmniBaseState const> OmniBaseStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator1> & lhs, const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator1> & lhs, const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tomm_hardware_real

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc9f3e21e19731c56a4c57b6a5b80bb7";
  }

  static const char* value(const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc9f3e21e19731c5ULL;
  static const uint64_t static_value2 = 0x6a4c57b6a5b80bb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tomm_hardware_real/OmniBaseState";
  }

  static const char* value(const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DriverState[] state\n"
"================================================================================\n"
"MSG: tomm_hardware_real/DriverState\n"
"int32 position\n"
"uint32 digital_inputs\n"
"int32 velocity\n"
"uint16 status\n"
;
  }

  static const char* value(const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OmniBaseState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tomm_hardware_real::OmniBaseState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tomm_hardware_real::OmniBaseState_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tomm_hardware_real::DriverState_<ContainerAllocator> >::stream(s, indent + "    ", v.state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOMM_HARDWARE_REAL_MESSAGE_OMNIBASESTATE_H
