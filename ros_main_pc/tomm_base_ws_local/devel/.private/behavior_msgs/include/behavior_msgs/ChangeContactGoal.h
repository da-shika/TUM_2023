// Generated by gencpp from file behavior_msgs/ChangeContactGoal.msg
// DO NOT EDIT!


#ifndef BEHAVIOR_MSGS_MESSAGE_CHANGECONTACTGOAL_H
#define BEHAVIOR_MSGS_MESSAGE_CHANGECONTACTGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <control_core_msgs/Contact.h>
#include <std_msgs/String.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace behavior_msgs
{
template <class ContainerAllocator>
struct ChangeContactGoal_
{
  typedef ChangeContactGoal_<ContainerAllocator> Type;

  ChangeContactGoal_()
    : contact()
    , contact_task()
    , period_shift()
    , period_move()  {
    }
  ChangeContactGoal_(const ContainerAllocator& _alloc)
    : contact(_alloc)
    , contact_task(_alloc)
    , period_shift(_alloc)
    , period_move(_alloc)  {
  (void)_alloc;
    }



   typedef  ::control_core_msgs::Contact_<ContainerAllocator>  _contact_type;
  _contact_type contact;

   typedef  ::std_msgs::String_<ContainerAllocator>  _contact_task_type;
  _contact_task_type contact_task;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _period_shift_type;
  _period_shift_type period_shift;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _period_move_type;
  _period_move_type period_move;





  typedef boost::shared_ptr< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeContactGoal_

typedef ::behavior_msgs::ChangeContactGoal_<std::allocator<void> > ChangeContactGoal;

typedef boost::shared_ptr< ::behavior_msgs::ChangeContactGoal > ChangeContactGoalPtr;
typedef boost::shared_ptr< ::behavior_msgs::ChangeContactGoal const> ChangeContactGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator1> & lhs, const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator2> & rhs)
{
  return lhs.contact == rhs.contact &&
    lhs.contact_task == rhs.contact_task &&
    lhs.period_shift == rhs.period_shift &&
    lhs.period_move == rhs.period_move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator1> & lhs, const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behavior_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c367d756141e2b8f1da4bca88b2ffb4b";
  }

  static const char* value(const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc367d756141e2b8fULL;
  static const uint64_t static_value2 = 0x1da4bca88b2ffb4bULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behavior_msgs/ChangeContactGoal";
  }

  static const char* value(const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"control_core_msgs/Contact contact\n"
"std_msgs/String contact_task\n"
"std_msgs/Float64 period_shift\n"
"std_msgs/Float64 period_move\n"
"\n"
"================================================================================\n"
"MSG: control_core_msgs/Contact\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Point offset\n"
"std_msgs/Float64 friction\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contact);
      stream.next(m.contact_task);
      stream.next(m.period_shift);
      stream.next(m.period_move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeContactGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behavior_msgs::ChangeContactGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behavior_msgs::ChangeContactGoal_<ContainerAllocator>& v)
  {
    s << indent << "contact: ";
    s << std::endl;
    Printer< ::control_core_msgs::Contact_<ContainerAllocator> >::stream(s, indent + "  ", v.contact);
    s << indent << "contact_task: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.contact_task);
    s << indent << "period_shift: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.period_shift);
    s << indent << "period_move: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.period_move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOR_MSGS_MESSAGE_CHANGECONTACTGOAL_H
