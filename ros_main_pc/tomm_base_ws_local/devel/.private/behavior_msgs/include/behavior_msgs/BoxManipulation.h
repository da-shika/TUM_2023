// Generated by gencpp from file behavior_msgs/BoxManipulation.msg
// DO NOT EDIT!


#ifndef BEHAVIOR_MSGS_MESSAGE_BOXMANIPULATION_H
#define BEHAVIOR_MSGS_MESSAGE_BOXMANIPULATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Wrench.h>

namespace behavior_msgs
{
template <class ContainerAllocator>
struct BoxManipulation_
{
  typedef BoxManipulation_<ContainerAllocator> Type;

  BoxManipulation_()
    : header()
    , state(0)
    , W_r_ref()
    , W_l_ref()
    , W_r_off()
    , W_l_off()
    , W_r_des()
    , W_l_des()
    , W_r_real_skin()
    , W_l_real_skin()
    , W_r_real_ft()
    , W_l_real_ft()  {
    }
  BoxManipulation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , W_r_ref(_alloc)
    , W_l_ref(_alloc)
    , W_r_off(_alloc)
    , W_l_off(_alloc)
    , W_r_des(_alloc)
    , W_l_des(_alloc)
    , W_r_real_skin(_alloc)
    , W_l_real_skin(_alloc)
    , W_r_real_ft(_alloc)
    , W_l_real_ft(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_r_ref_type;
  _W_r_ref_type W_r_ref;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_l_ref_type;
  _W_l_ref_type W_l_ref;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_r_off_type;
  _W_r_off_type W_r_off;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_l_off_type;
  _W_l_off_type W_l_off;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_r_des_type;
  _W_r_des_type W_r_des;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_l_des_type;
  _W_l_des_type W_l_des;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_r_real_skin_type;
  _W_r_real_skin_type W_r_real_skin;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_l_real_skin_type;
  _W_l_real_skin_type W_l_real_skin;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_r_real_ft_type;
  _W_r_real_ft_type W_r_real_ft;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _W_l_real_ft_type;
  _W_l_real_ft_type W_l_real_ft;





  typedef boost::shared_ptr< ::behavior_msgs::BoxManipulation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_msgs::BoxManipulation_<ContainerAllocator> const> ConstPtr;

}; // struct BoxManipulation_

typedef ::behavior_msgs::BoxManipulation_<std::allocator<void> > BoxManipulation;

typedef boost::shared_ptr< ::behavior_msgs::BoxManipulation > BoxManipulationPtr;
typedef boost::shared_ptr< ::behavior_msgs::BoxManipulation const> BoxManipulationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behavior_msgs::BoxManipulation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behavior_msgs::BoxManipulation_<ContainerAllocator1> & lhs, const ::behavior_msgs::BoxManipulation_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.W_r_ref == rhs.W_r_ref &&
    lhs.W_l_ref == rhs.W_l_ref &&
    lhs.W_r_off == rhs.W_r_off &&
    lhs.W_l_off == rhs.W_l_off &&
    lhs.W_r_des == rhs.W_r_des &&
    lhs.W_l_des == rhs.W_l_des &&
    lhs.W_r_real_skin == rhs.W_r_real_skin &&
    lhs.W_l_real_skin == rhs.W_l_real_skin &&
    lhs.W_r_real_ft == rhs.W_r_real_ft &&
    lhs.W_l_real_ft == rhs.W_l_real_ft;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behavior_msgs::BoxManipulation_<ContainerAllocator1> & lhs, const ::behavior_msgs::BoxManipulation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behavior_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_msgs::BoxManipulation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_msgs::BoxManipulation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_msgs::BoxManipulation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1764b3b821c4db67f223b0ac4257c2d9";
  }

  static const char* value(const ::behavior_msgs::BoxManipulation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1764b3b821c4db67ULL;
  static const uint64_t static_value2 = 0xf223b0ac4257c2d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behavior_msgs/BoxManipulation";
  }

  static const char* value(const ::behavior_msgs::BoxManipulation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8 state\n"
"\n"
"geometry_msgs/Wrench W_r_ref\n"
"geometry_msgs/Wrench W_l_ref\n"
"\n"
"geometry_msgs/Wrench W_r_off\n"
"geometry_msgs/Wrench W_l_off\n"
"\n"
"geometry_msgs/Wrench W_r_des\n"
"geometry_msgs/Wrench W_l_des\n"
"\n"
"geometry_msgs/Wrench W_r_real_skin\n"
"geometry_msgs/Wrench W_l_real_skin\n"
"\n"
"geometry_msgs/Wrench W_r_real_ft\n"
"geometry_msgs/Wrench W_l_real_ft\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::behavior_msgs::BoxManipulation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.W_r_ref);
      stream.next(m.W_l_ref);
      stream.next(m.W_r_off);
      stream.next(m.W_l_off);
      stream.next(m.W_r_des);
      stream.next(m.W_l_des);
      stream.next(m.W_r_real_skin);
      stream.next(m.W_l_real_skin);
      stream.next(m.W_r_real_ft);
      stream.next(m.W_l_real_ft);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoxManipulation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behavior_msgs::BoxManipulation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behavior_msgs::BoxManipulation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "W_r_ref: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_r_ref);
    s << indent << "W_l_ref: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_l_ref);
    s << indent << "W_r_off: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_r_off);
    s << indent << "W_l_off: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_l_off);
    s << indent << "W_r_des: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_r_des);
    s << indent << "W_l_des: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_l_des);
    s << indent << "W_r_real_skin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_r_real_skin);
    s << indent << "W_l_real_skin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_l_real_skin);
    s << indent << "W_r_real_ft: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_r_real_ft);
    s << indent << "W_l_real_ft: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.W_l_real_ft);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOR_MSGS_MESSAGE_BOXMANIPULATION_H
