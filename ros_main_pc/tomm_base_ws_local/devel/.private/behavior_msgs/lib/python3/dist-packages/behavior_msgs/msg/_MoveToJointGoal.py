# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behavior_msgs/MoveToJointGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import std_msgs.msg

class MoveToJointGoal(genpy.Message):
  _md5sum = "af979f8fbb920ef78156356fc24a7d2b"
  _type = "behavior_msgs/MoveToJointGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
control_core_msgs/Vector target         # target joint pose
control_core_msgs/Vector intermediate   # optional intermediate target
std_msgs/String motion_task             # motion task for the movement
std_msgs/Float64 period                 # time period of the motion

================================================================================
MSG: control_core_msgs/Vector
float64[] data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Float64
float64 data"""
  __slots__ = ['target','intermediate','motion_task','period']
  _slot_types = ['control_core_msgs/Vector','control_core_msgs/Vector','std_msgs/String','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target,intermediate,motion_task,period

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveToJointGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target is None:
        self.target = control_core_msgs.msg.Vector()
      if self.intermediate is None:
        self.intermediate = control_core_msgs.msg.Vector()
      if self.motion_task is None:
        self.motion_task = std_msgs.msg.String()
      if self.period is None:
        self.period = std_msgs.msg.Float64()
    else:
      self.target = control_core_msgs.msg.Vector()
      self.intermediate = control_core_msgs.msg.Vector()
      self.motion_task = std_msgs.msg.String()
      self.period = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.target.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.target.data))
      length = len(self.intermediate.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.intermediate.data))
      _x = self.motion_task.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.period.data
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target is None:
        self.target = control_core_msgs.msg.Vector()
      if self.intermediate is None:
        self.intermediate = control_core_msgs.msg.Vector()
      if self.motion_task is None:
        self.motion_task = std_msgs.msg.String()
      if self.period is None:
        self.period = std_msgs.msg.Float64()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.target.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.intermediate.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_task.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motion_task.data = str[start:end]
      start = end
      end += 8
      (self.period.data,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.target.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.target.data.tostring())
      length = len(self.intermediate.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.intermediate.data.tostring())
      _x = self.motion_task.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.period.data
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target is None:
        self.target = control_core_msgs.msg.Vector()
      if self.intermediate is None:
        self.intermediate = control_core_msgs.msg.Vector()
      if self.motion_task is None:
        self.motion_task = std_msgs.msg.String()
      if self.period is None:
        self.period = std_msgs.msg.Float64()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.target.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.intermediate.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_task.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motion_task.data = str[start:end]
      start = end
      end += 8
      (self.period.data,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
