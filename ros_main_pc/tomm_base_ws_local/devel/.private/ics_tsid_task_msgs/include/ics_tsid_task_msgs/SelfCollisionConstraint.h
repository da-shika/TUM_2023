// Generated by gencpp from file ics_tsid_task_msgs/SelfCollisionConstraint.msg
// DO NOT EDIT!


#ifndef ICS_TSID_TASK_MSGS_MESSAGE_SELFCOLLISIONCONSTRAINT_H
#define ICS_TSID_TASK_MSGS_MESSAGE_SELFCOLLISIONCONSTRAINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int64.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float64.h>
#include <control_core_msgs/Vector.h>

namespace ics_tsid_task_msgs
{
template <class ContainerAllocator>
struct SelfCollisionConstraint_
{
  typedef SelfCollisionConstraint_<ContainerAllocator> Type;

  SelfCollisionConstraint_()
    : dur()
    , num_active_ieq()
    , num_violated_ieq()
    , min_distance()
    , distances()  {
    }
  SelfCollisionConstraint_(const ContainerAllocator& _alloc)
    : dur(_alloc)
    , num_active_ieq(_alloc)
    , num_violated_ieq(_alloc)
    , min_distance(_alloc)
    , distances(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int64_<ContainerAllocator>  _dur_type;
  _dur_type dur;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _num_active_ieq_type;
  _num_active_ieq_type num_active_ieq;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _num_violated_ieq_type;
  _num_violated_ieq_type num_violated_ieq;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _min_distance_type;
  _min_distance_type min_distance;

   typedef  ::control_core_msgs::Vector_<ContainerAllocator>  _distances_type;
  _distances_type distances;





  typedef boost::shared_ptr< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> const> ConstPtr;

}; // struct SelfCollisionConstraint_

typedef ::ics_tsid_task_msgs::SelfCollisionConstraint_<std::allocator<void> > SelfCollisionConstraint;

typedef boost::shared_ptr< ::ics_tsid_task_msgs::SelfCollisionConstraint > SelfCollisionConstraintPtr;
typedef boost::shared_ptr< ::ics_tsid_task_msgs::SelfCollisionConstraint const> SelfCollisionConstraintConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator1> & lhs, const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator2> & rhs)
{
  return lhs.dur == rhs.dur &&
    lhs.num_active_ieq == rhs.num_active_ieq &&
    lhs.num_violated_ieq == rhs.num_violated_ieq &&
    lhs.min_distance == rhs.min_distance &&
    lhs.distances == rhs.distances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator1> & lhs, const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ics_tsid_task_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f09e82fd510858f1c3f5993df0a68ab2";
  }

  static const char* value(const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf09e82fd510858f1ULL;
  static const uint64_t static_value2 = 0xc3f5993df0a68ab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ics_tsid_task_msgs/SelfCollisionConstraint";
  }

  static const char* value(const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int64 dur\n"
"std_msgs/Int32 num_active_ieq\n"
"std_msgs/Int32 num_violated_ieq\n"
"\n"
"std_msgs/Float64 min_distance\n"
"control_core_msgs/Vector distances\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: control_core_msgs/Vector\n"
"float64[] data\n"
;
  }

  static const char* value(const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dur);
      stream.next(m.num_active_ieq);
      stream.next(m.num_violated_ieq);
      stream.next(m.min_distance);
      stream.next(m.distances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SelfCollisionConstraint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ics_tsid_task_msgs::SelfCollisionConstraint_<ContainerAllocator>& v)
  {
    s << indent << "dur: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.dur);
    s << indent << "num_active_ieq: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.num_active_ieq);
    s << indent << "num_violated_ieq: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.num_violated_ieq);
    s << indent << "min_distance: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.min_distance);
    s << indent << "distances: ";
    s << std::endl;
    Printer< ::control_core_msgs::Vector_<ContainerAllocator> >::stream(s, indent + "  ", v.distances);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICS_TSID_TASK_MSGS_MESSAGE_SELFCOLLISIONCONSTRAINT_H
