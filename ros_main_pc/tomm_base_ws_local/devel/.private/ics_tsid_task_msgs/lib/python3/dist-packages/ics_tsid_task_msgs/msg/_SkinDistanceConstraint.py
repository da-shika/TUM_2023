# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ics_tsid_task_msgs/SkinDistanceConstraint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import std_msgs.msg

class SkinDistanceConstraint(genpy.Message):
  _md5sum = "f1adb03c236ae24d7d056bb4d4bea499"
  _type = "ics_tsid_task_msgs/SkinDistanceConstraint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Int64 dur
std_msgs/Int32 num_active_ieq
std_msgs/Int32 num_violated_ieq
std_msgs/Int32 conflict

std_msgs/Float64 max_force
std_msgs/Float64 min_distance
std_msgs/Float64 max_proximity

control_core_msgs/Vector distances
control_core_msgs/Vector cell_nums
control_core_msgs/Vector vel_limits
control_core_msgs/Vector vel_cmds
control_core_msgs/Vector acc_limits

std_msgs/Float64 weight
control_core_msgs/Vector a_relaxed

================================================================================
MSG: std_msgs/Int64
int64 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: control_core_msgs/Vector
float64[] data"""
  __slots__ = ['dur','num_active_ieq','num_violated_ieq','conflict','max_force','min_distance','max_proximity','distances','cell_nums','vel_limits','vel_cmds','acc_limits','weight','a_relaxed']
  _slot_types = ['std_msgs/Int64','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','control_core_msgs/Vector','control_core_msgs/Vector','control_core_msgs/Vector','control_core_msgs/Vector','control_core_msgs/Vector','std_msgs/Float64','control_core_msgs/Vector']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dur,num_active_ieq,num_violated_ieq,conflict,max_force,min_distance,max_proximity,distances,cell_nums,vel_limits,vel_cmds,acc_limits,weight,a_relaxed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SkinDistanceConstraint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.conflict is None:
        self.conflict = std_msgs.msg.Int32()
      if self.max_force is None:
        self.max_force = std_msgs.msg.Float64()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.max_proximity is None:
        self.max_proximity = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
      if self.cell_nums is None:
        self.cell_nums = control_core_msgs.msg.Vector()
      if self.vel_limits is None:
        self.vel_limits = control_core_msgs.msg.Vector()
      if self.vel_cmds is None:
        self.vel_cmds = control_core_msgs.msg.Vector()
      if self.acc_limits is None:
        self.acc_limits = control_core_msgs.msg.Vector()
      if self.weight is None:
        self.weight = std_msgs.msg.Float64()
      if self.a_relaxed is None:
        self.a_relaxed = control_core_msgs.msg.Vector()
    else:
      self.dur = std_msgs.msg.Int64()
      self.num_active_ieq = std_msgs.msg.Int32()
      self.num_violated_ieq = std_msgs.msg.Int32()
      self.conflict = std_msgs.msg.Int32()
      self.max_force = std_msgs.msg.Float64()
      self.min_distance = std_msgs.msg.Float64()
      self.max_proximity = std_msgs.msg.Float64()
      self.distances = control_core_msgs.msg.Vector()
      self.cell_nums = control_core_msgs.msg.Vector()
      self.vel_limits = control_core_msgs.msg.Vector()
      self.vel_cmds = control_core_msgs.msg.Vector()
      self.acc_limits = control_core_msgs.msg.Vector()
      self.weight = std_msgs.msg.Float64()
      self.a_relaxed = control_core_msgs.msg.Vector()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q3i3d().pack(_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.conflict.data, _x.max_force.data, _x.min_distance.data, _x.max_proximity.data))
      length = len(self.distances.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.distances.data))
      length = len(self.cell_nums.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cell_nums.data))
      length = len(self.vel_limits.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.vel_limits.data))
      length = len(self.vel_cmds.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.vel_cmds.data))
      length = len(self.acc_limits.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.acc_limits.data))
      _x = self.weight.data
      buff.write(_get_struct_d().pack(_x))
      length = len(self.a_relaxed.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.a_relaxed.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.conflict is None:
        self.conflict = std_msgs.msg.Int32()
      if self.max_force is None:
        self.max_force = std_msgs.msg.Float64()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.max_proximity is None:
        self.max_proximity = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
      if self.cell_nums is None:
        self.cell_nums = control_core_msgs.msg.Vector()
      if self.vel_limits is None:
        self.vel_limits = control_core_msgs.msg.Vector()
      if self.vel_cmds is None:
        self.vel_cmds = control_core_msgs.msg.Vector()
      if self.acc_limits is None:
        self.acc_limits = control_core_msgs.msg.Vector()
      if self.weight is None:
        self.weight = std_msgs.msg.Float64()
      if self.a_relaxed is None:
        self.a_relaxed = control_core_msgs.msg.Vector()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.conflict.data, _x.max_force.data, _x.min_distance.data, _x.max_proximity.data,) = _get_struct_q3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distances.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_nums.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel_limits.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel_cmds.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc_limits.data = s.unpack(str[start:end])
      start = end
      end += 8
      (self.weight.data,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.a_relaxed.data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q3i3d().pack(_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.conflict.data, _x.max_force.data, _x.min_distance.data, _x.max_proximity.data))
      length = len(self.distances.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.distances.data.tostring())
      length = len(self.cell_nums.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cell_nums.data.tostring())
      length = len(self.vel_limits.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.vel_limits.data.tostring())
      length = len(self.vel_cmds.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.vel_cmds.data.tostring())
      length = len(self.acc_limits.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.acc_limits.data.tostring())
      _x = self.weight.data
      buff.write(_get_struct_d().pack(_x))
      length = len(self.a_relaxed.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.a_relaxed.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.conflict is None:
        self.conflict = std_msgs.msg.Int32()
      if self.max_force is None:
        self.max_force = std_msgs.msg.Float64()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.max_proximity is None:
        self.max_proximity = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
      if self.cell_nums is None:
        self.cell_nums = control_core_msgs.msg.Vector()
      if self.vel_limits is None:
        self.vel_limits = control_core_msgs.msg.Vector()
      if self.vel_cmds is None:
        self.vel_cmds = control_core_msgs.msg.Vector()
      if self.acc_limits is None:
        self.acc_limits = control_core_msgs.msg.Vector()
      if self.weight is None:
        self.weight = std_msgs.msg.Float64()
      if self.a_relaxed is None:
        self.a_relaxed = control_core_msgs.msg.Vector()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.conflict.data, _x.max_force.data, _x.min_distance.data, _x.max_proximity.data,) = _get_struct_q3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distances.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_nums.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel_limits.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel_cmds.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc_limits.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.weight.data,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.a_relaxed.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q3i3d = None
def _get_struct_q3i3d():
    global _struct_q3i3d
    if _struct_q3i3d is None:
        _struct_q3i3d = struct.Struct("<q3i3d")
    return _struct_q3i3d
