# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ics_tsid_task_msgs/SelfCollisionConstraint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import std_msgs.msg

class SelfCollisionConstraint(genpy.Message):
  _md5sum = "f09e82fd510858f1c3f5993df0a68ab2"
  _type = "ics_tsid_task_msgs/SelfCollisionConstraint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Int64 dur
std_msgs/Int32 num_active_ieq
std_msgs/Int32 num_violated_ieq

std_msgs/Float64 min_distance
control_core_msgs/Vector distances
================================================================================
MSG: std_msgs/Int64
int64 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: control_core_msgs/Vector
float64[] data"""
  __slots__ = ['dur','num_active_ieq','num_violated_ieq','min_distance','distances']
  _slot_types = ['std_msgs/Int64','std_msgs/Int32','std_msgs/Int32','std_msgs/Float64','control_core_msgs/Vector']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dur,num_active_ieq,num_violated_ieq,min_distance,distances

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SelfCollisionConstraint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
    else:
      self.dur = std_msgs.msg.Int64()
      self.num_active_ieq = std_msgs.msg.Int32()
      self.num_violated_ieq = std_msgs.msg.Int32()
      self.min_distance = std_msgs.msg.Float64()
      self.distances = control_core_msgs.msg.Vector()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2id().pack(_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.min_distance.data))
      length = len(self.distances.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.distances.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.min_distance.data,) = _get_struct_q2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distances.data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2id().pack(_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.min_distance.data))
      length = len(self.distances.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.distances.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dur is None:
        self.dur = std_msgs.msg.Int64()
      if self.num_active_ieq is None:
        self.num_active_ieq = std_msgs.msg.Int32()
      if self.num_violated_ieq is None:
        self.num_violated_ieq = std_msgs.msg.Int32()
      if self.min_distance is None:
        self.min_distance = std_msgs.msg.Float64()
      if self.distances is None:
        self.distances = control_core_msgs.msg.Vector()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.dur.data, _x.num_active_ieq.data, _x.num_violated_ieq.data, _x.min_distance.data,) = _get_struct_q2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.distances.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q2id = None
def _get_struct_q2id():
    global _struct_q2id
    if _struct_q2id is None:
        _struct_q2id = struct.Struct("<q2id")
    return _struct_q2id
