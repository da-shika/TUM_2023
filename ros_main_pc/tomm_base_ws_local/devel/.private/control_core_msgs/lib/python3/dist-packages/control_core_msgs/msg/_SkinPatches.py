# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_core_msgs/SkinPatches.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class SkinPatches(genpy.Message):
  _md5sum = "54325af118430bc2db92b5f684606b52"
  _type = "control_core_msgs/SkinPatches"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SkinPatch[] patches
================================================================================
MSG: control_core_msgs/SkinPatch
std_msgs/Header header
geometry_msgs/Pose pose
SkinModality force
SkinModality proximity
std_msgs/Float64 min_dist
std_msgs/Float64 max_dist
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: control_core_msgs/SkinModality
std_msgs/Float64 min
std_msgs/Float64 max
std_msgs/Float64 area
geometry_msgs/Point cop
geometry_msgs/Wrench wrench
geometry_msgs/Polygon hull
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['patches']
  _slot_types = ['control_core_msgs/SkinPatch[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       patches

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SkinPatches, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.patches is None:
        self.patches = []
    else:
      self.patches = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.patches)
      buff.write(_struct_I.pack(length))
      for val1 in self.patches:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.force
        _v7 = _v6.min
        _x = _v7.data
        buff.write(_get_struct_d().pack(_x))
        _v8 = _v6.max
        _x = _v8.data
        buff.write(_get_struct_d().pack(_x))
        _v9 = _v6.area
        _x = _v9.data
        buff.write(_get_struct_d().pack(_x))
        _v10 = _v6.cop
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v6.wrench
        _v12 = _v11.force
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v11.torque
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v6.hull
        length = len(_v14.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v14.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v15 = val1.proximity
        _v16 = _v15.min
        _x = _v16.data
        buff.write(_get_struct_d().pack(_x))
        _v17 = _v15.max
        _x = _v17.data
        buff.write(_get_struct_d().pack(_x))
        _v18 = _v15.area
        _x = _v18.data
        buff.write(_get_struct_d().pack(_x))
        _v19 = _v15.cop
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = _v15.wrench
        _v21 = _v20.force
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v22 = _v20.torque
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = _v15.hull
        length = len(_v23.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v23.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v24 = val1.min_dist
        _x = _v24.data
        buff.write(_get_struct_d().pack(_x))
        _v25 = val1.max_dist
        _x = _v25.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.patches is None:
        self.patches = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.patches = []
      for i in range(0, length):
        val1 = control_core_msgs.msg.SkinPatch()
        _v26 = val1.header
        start = end
        end += 4
        (_v26.seq,) = _get_struct_I().unpack(str[start:end])
        _v27 = _v26.stamp
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.frame_id = str[start:end]
        _v28 = val1.pose
        _v29 = _v28.position
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = _v28.orientation
        _x = _v30
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v31 = val1.force
        _v32 = _v31.min
        start = end
        end += 8
        (_v32.data,) = _get_struct_d().unpack(str[start:end])
        _v33 = _v31.max
        start = end
        end += 8
        (_v33.data,) = _get_struct_d().unpack(str[start:end])
        _v34 = _v31.area
        start = end
        end += 8
        (_v34.data,) = _get_struct_d().unpack(str[start:end])
        _v35 = _v31.cop
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v31.wrench
        _v37 = _v36.force
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = _v36.torque
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = _v31.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v39.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v39.points.append(val4)
        _v40 = val1.proximity
        _v41 = _v40.min
        start = end
        end += 8
        (_v41.data,) = _get_struct_d().unpack(str[start:end])
        _v42 = _v40.max
        start = end
        end += 8
        (_v42.data,) = _get_struct_d().unpack(str[start:end])
        _v43 = _v40.area
        start = end
        end += 8
        (_v43.data,) = _get_struct_d().unpack(str[start:end])
        _v44 = _v40.cop
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v45 = _v40.wrench
        _v46 = _v45.force
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = _v45.torque
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v48 = _v40.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v48.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v48.points.append(val4)
        _v49 = val1.min_dist
        start = end
        end += 8
        (_v49.data,) = _get_struct_d().unpack(str[start:end])
        _v50 = val1.max_dist
        start = end
        end += 8
        (_v50.data,) = _get_struct_d().unpack(str[start:end])
        self.patches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.patches)
      buff.write(_struct_I.pack(length))
      for val1 in self.patches:
        _v51 = val1.header
        _x = _v51.seq
        buff.write(_get_struct_I().pack(_x))
        _v52 = _v51.stamp
        _x = _v52
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v51.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v53 = val1.pose
        _v54 = _v53.position
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v55 = _v53.orientation
        _x = _v55
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v56 = val1.force
        _v57 = _v56.min
        _x = _v57.data
        buff.write(_get_struct_d().pack(_x))
        _v58 = _v56.max
        _x = _v58.data
        buff.write(_get_struct_d().pack(_x))
        _v59 = _v56.area
        _x = _v59.data
        buff.write(_get_struct_d().pack(_x))
        _v60 = _v56.cop
        _x = _v60
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v61 = _v56.wrench
        _v62 = _v61.force
        _x = _v62
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v63 = _v61.torque
        _x = _v63
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v64 = _v56.hull
        length = len(_v64.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v64.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v65 = val1.proximity
        _v66 = _v65.min
        _x = _v66.data
        buff.write(_get_struct_d().pack(_x))
        _v67 = _v65.max
        _x = _v67.data
        buff.write(_get_struct_d().pack(_x))
        _v68 = _v65.area
        _x = _v68.data
        buff.write(_get_struct_d().pack(_x))
        _v69 = _v65.cop
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v70 = _v65.wrench
        _v71 = _v70.force
        _x = _v71
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v72 = _v70.torque
        _x = _v72
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v73 = _v65.hull
        length = len(_v73.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v73.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v74 = val1.min_dist
        _x = _v74.data
        buff.write(_get_struct_d().pack(_x))
        _v75 = val1.max_dist
        _x = _v75.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.patches is None:
        self.patches = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.patches = []
      for i in range(0, length):
        val1 = control_core_msgs.msg.SkinPatch()
        _v76 = val1.header
        start = end
        end += 4
        (_v76.seq,) = _get_struct_I().unpack(str[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v76.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v76.frame_id = str[start:end]
        _v78 = val1.pose
        _v79 = _v78.position
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v80 = _v78.orientation
        _x = _v80
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v81 = val1.force
        _v82 = _v81.min
        start = end
        end += 8
        (_v82.data,) = _get_struct_d().unpack(str[start:end])
        _v83 = _v81.max
        start = end
        end += 8
        (_v83.data,) = _get_struct_d().unpack(str[start:end])
        _v84 = _v81.area
        start = end
        end += 8
        (_v84.data,) = _get_struct_d().unpack(str[start:end])
        _v85 = _v81.cop
        _x = _v85
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v86 = _v81.wrench
        _v87 = _v86.force
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v88 = _v86.torque
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v89 = _v81.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v89.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v89.points.append(val4)
        _v90 = val1.proximity
        _v91 = _v90.min
        start = end
        end += 8
        (_v91.data,) = _get_struct_d().unpack(str[start:end])
        _v92 = _v90.max
        start = end
        end += 8
        (_v92.data,) = _get_struct_d().unpack(str[start:end])
        _v93 = _v90.area
        start = end
        end += 8
        (_v93.data,) = _get_struct_d().unpack(str[start:end])
        _v94 = _v90.cop
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v95 = _v90.wrench
        _v96 = _v95.force
        _x = _v96
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v97 = _v95.torque
        _x = _v97
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v98 = _v90.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v98.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v98.points.append(val4)
        _v99 = val1.min_dist
        start = end
        end += 8
        (_v99.data,) = _get_struct_d().unpack(str[start:end])
        _v100 = val1.max_dist
        start = end
        end += 8
        (_v100.data,) = _get_struct_d().unpack(str[start:end])
        self.patches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
