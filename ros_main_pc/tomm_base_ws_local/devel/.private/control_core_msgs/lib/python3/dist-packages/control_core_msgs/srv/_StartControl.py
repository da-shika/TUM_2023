# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_core_msgs/StartControlRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StartControlRequest(genpy.Message):
  _md5sum = "4e03965fe6f41486397643b5f0d2b3fb"
  _type = "control_core_msgs/StartControlRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 CONNECTION_STATE_INIT
uint8 CONNECTION_STATE_START
uint8 connection_state          # connection state
"""
  __slots__ = ['CONNECTION_STATE_INIT','CONNECTION_STATE_START','connection_state']
  _slot_types = ['uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CONNECTION_STATE_INIT,CONNECTION_STATE_START,connection_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartControlRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.CONNECTION_STATE_INIT is None:
        self.CONNECTION_STATE_INIT = 0
      if self.CONNECTION_STATE_START is None:
        self.CONNECTION_STATE_START = 0
      if self.connection_state is None:
        self.connection_state = 0
    else:
      self.CONNECTION_STATE_INIT = 0
      self.CONNECTION_STATE_START = 0
      self.connection_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.CONNECTION_STATE_INIT, _x.CONNECTION_STATE_START, _x.connection_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.CONNECTION_STATE_INIT, _x.CONNECTION_STATE_START, _x.connection_state,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.CONNECTION_STATE_INIT, _x.CONNECTION_STATE_START, _x.connection_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.CONNECTION_STATE_INIT, _x.CONNECTION_STATE_START, _x.connection_state,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_core_msgs/StartControlResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class StartControlResponse(genpy.Message):
  _md5sum = "a68988483f7f2cf7a5c26ac2780b57b2"
  _type = "control_core_msgs/StartControlResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RobotState state                # robot state

================================================================================
MSG: control_core_msgs/RobotState
JointState joints
CartesianState floating_base
sensor_msgs/Imu imu
geometry_msgs/WrenchStamped[] ft_sensors
SkinPatch[] patches
================================================================================
MSG: control_core_msgs/JointState
Vector position
Vector velocity
Vector acceleration
================================================================================
MSG: control_core_msgs/Vector
float64[] data
================================================================================
MSG: control_core_msgs/CartesianState
geometry_msgs/Pose position
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/WrenchStamped
# A wrench with reference coordinate frame and timestamp
Header header
Wrench wrench

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: control_core_msgs/SkinPatch
std_msgs/Header header
geometry_msgs/Pose pose
SkinModality force
SkinModality proximity
std_msgs/Float64 min_dist
std_msgs/Float64 max_dist
================================================================================
MSG: control_core_msgs/SkinModality
std_msgs/Float64 min
std_msgs/Float64 max
std_msgs/Float64 area
geometry_msgs/Point cop
geometry_msgs/Wrench wrench
geometry_msgs/Polygon hull
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['state']
  _slot_types = ['control_core_msgs/RobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartControlResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = control_core_msgs.msg.RobotState()
    else:
      self.state = control_core_msgs.msg.RobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.state.joints.position.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.state.joints.position.data))
      length = len(self.state.joints.velocity.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.state.joints.velocity.data))
      length = len(self.state.joints.acceleration.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.state.joints.acceleration.data))
      _x = self
      buff.write(_get_struct_19d3I().pack(_x.state.floating_base.position.position.x, _x.state.floating_base.position.position.y, _x.state.floating_base.position.position.z, _x.state.floating_base.position.orientation.x, _x.state.floating_base.position.orientation.y, _x.state.floating_base.position.orientation.z, _x.state.floating_base.position.orientation.w, _x.state.floating_base.velocity.linear.x, _x.state.floating_base.velocity.linear.y, _x.state.floating_base.velocity.linear.z, _x.state.floating_base.velocity.angular.x, _x.state.floating_base.velocity.angular.y, _x.state.floating_base.velocity.angular.z, _x.state.floating_base.acceleration.linear.x, _x.state.floating_base.acceleration.linear.y, _x.state.floating_base.acceleration.linear.z, _x.state.floating_base.acceleration.angular.x, _x.state.floating_base.acceleration.angular.y, _x.state.floating_base.acceleration.angular.z, _x.state.imu.header.seq, _x.state.imu.header.stamp.secs, _x.state.imu.header.stamp.nsecs))
      _x = self.state.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.state.imu.orientation.x, _x.state.imu.orientation.y, _x.state.imu.orientation.z, _x.state.imu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.state.imu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.state.imu.angular_velocity.x, _x.state.imu.angular_velocity.y, _x.state.imu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.state.imu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.state.imu.linear_acceleration.x, _x.state.imu.linear_acceleration.y, _x.state.imu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.state.imu.linear_acceleration_covariance))
      length = len(self.state.ft_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ft_sensors:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.wrench
        _v4 = _v3.force
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.torque
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.state.patches)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.patches:
        _v6 = val1.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v8 = val1.pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v11 = val1.force
        _v12 = _v11.min
        _x = _v12.data
        buff.write(_get_struct_d().pack(_x))
        _v13 = _v11.max
        _x = _v13.data
        buff.write(_get_struct_d().pack(_x))
        _v14 = _v11.area
        _x = _v14.data
        buff.write(_get_struct_d().pack(_x))
        _v15 = _v11.cop
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = _v11.wrench
        _v17 = _v16.force
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.torque
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v11.hull
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v19.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v20 = val1.proximity
        _v21 = _v20.min
        _x = _v21.data
        buff.write(_get_struct_d().pack(_x))
        _v22 = _v20.max
        _x = _v22.data
        buff.write(_get_struct_d().pack(_x))
        _v23 = _v20.area
        _x = _v23.data
        buff.write(_get_struct_d().pack(_x))
        _v24 = _v20.cop
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v25 = _v20.wrench
        _v26 = _v25.force
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = _v25.torque
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v28 = _v20.hull
        length = len(_v28.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v28.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v29 = val1.min_dist
        _x = _v29.data
        buff.write(_get_struct_d().pack(_x))
        _v30 = val1.max_dist
        _x = _v30.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = control_core_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.position.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.velocity.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.acceleration.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 164
      (_x.state.floating_base.position.position.x, _x.state.floating_base.position.position.y, _x.state.floating_base.position.position.z, _x.state.floating_base.position.orientation.x, _x.state.floating_base.position.orientation.y, _x.state.floating_base.position.orientation.z, _x.state.floating_base.position.orientation.w, _x.state.floating_base.velocity.linear.x, _x.state.floating_base.velocity.linear.y, _x.state.floating_base.velocity.linear.z, _x.state.floating_base.velocity.angular.x, _x.state.floating_base.velocity.angular.y, _x.state.floating_base.velocity.angular.z, _x.state.floating_base.acceleration.linear.x, _x.state.floating_base.acceleration.linear.y, _x.state.floating_base.acceleration.linear.z, _x.state.floating_base.acceleration.angular.x, _x.state.floating_base.acceleration.angular.y, _x.state.floating_base.acceleration.angular.z, _x.state.imu.header.seq, _x.state.imu.header.stamp.secs, _x.state.imu.header.stamp.nsecs,) = _get_struct_19d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.state.imu.orientation.x, _x.state.imu.orientation.y, _x.state.imu.orientation.z, _x.state.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.state.imu.angular_velocity.x, _x.state.imu.angular_velocity.y, _x.state.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.state.imu.linear_acceleration.x, _x.state.imu.linear_acceleration.y, _x.state.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ft_sensors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.WrenchStamped()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.frame_id = str[start:end]
        _v33 = val1.wrench
        _v34 = _v33.force
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v35 = _v33.torque
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.state.ft_sensors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.patches = []
      for i in range(0, length):
        val1 = control_core_msgs.msg.SkinPatch()
        _v36 = val1.header
        start = end
        end += 4
        (_v36.seq,) = _get_struct_I().unpack(str[start:end])
        _v37 = _v36.stamp
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v36.frame_id = str[start:end]
        _v38 = val1.pose
        _v39 = _v38.position
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = _v38.orientation
        _x = _v40
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v41 = val1.force
        _v42 = _v41.min
        start = end
        end += 8
        (_v42.data,) = _get_struct_d().unpack(str[start:end])
        _v43 = _v41.max
        start = end
        end += 8
        (_v43.data,) = _get_struct_d().unpack(str[start:end])
        _v44 = _v41.area
        start = end
        end += 8
        (_v44.data,) = _get_struct_d().unpack(str[start:end])
        _v45 = _v41.cop
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = _v41.wrench
        _v47 = _v46.force
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v48 = _v46.torque
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v49 = _v41.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v49.points.append(val4)
        _v50 = val1.proximity
        _v51 = _v50.min
        start = end
        end += 8
        (_v51.data,) = _get_struct_d().unpack(str[start:end])
        _v52 = _v50.max
        start = end
        end += 8
        (_v52.data,) = _get_struct_d().unpack(str[start:end])
        _v53 = _v50.area
        start = end
        end += 8
        (_v53.data,) = _get_struct_d().unpack(str[start:end])
        _v54 = _v50.cop
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v55 = _v50.wrench
        _v56 = _v55.force
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v57 = _v55.torque
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = _v50.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v58.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v58.points.append(val4)
        _v59 = val1.min_dist
        start = end
        end += 8
        (_v59.data,) = _get_struct_d().unpack(str[start:end])
        _v60 = val1.max_dist
        start = end
        end += 8
        (_v60.data,) = _get_struct_d().unpack(str[start:end])
        self.state.patches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.state.joints.position.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.state.joints.position.data.tostring())
      length = len(self.state.joints.velocity.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.state.joints.velocity.data.tostring())
      length = len(self.state.joints.acceleration.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.state.joints.acceleration.data.tostring())
      _x = self
      buff.write(_get_struct_19d3I().pack(_x.state.floating_base.position.position.x, _x.state.floating_base.position.position.y, _x.state.floating_base.position.position.z, _x.state.floating_base.position.orientation.x, _x.state.floating_base.position.orientation.y, _x.state.floating_base.position.orientation.z, _x.state.floating_base.position.orientation.w, _x.state.floating_base.velocity.linear.x, _x.state.floating_base.velocity.linear.y, _x.state.floating_base.velocity.linear.z, _x.state.floating_base.velocity.angular.x, _x.state.floating_base.velocity.angular.y, _x.state.floating_base.velocity.angular.z, _x.state.floating_base.acceleration.linear.x, _x.state.floating_base.acceleration.linear.y, _x.state.floating_base.acceleration.linear.z, _x.state.floating_base.acceleration.angular.x, _x.state.floating_base.acceleration.angular.y, _x.state.floating_base.acceleration.angular.z, _x.state.imu.header.seq, _x.state.imu.header.stamp.secs, _x.state.imu.header.stamp.nsecs))
      _x = self.state.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.state.imu.orientation.x, _x.state.imu.orientation.y, _x.state.imu.orientation.z, _x.state.imu.orientation.w))
      buff.write(self.state.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.state.imu.angular_velocity.x, _x.state.imu.angular_velocity.y, _x.state.imu.angular_velocity.z))
      buff.write(self.state.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.state.imu.linear_acceleration.x, _x.state.imu.linear_acceleration.y, _x.state.imu.linear_acceleration.z))
      buff.write(self.state.imu.linear_acceleration_covariance.tostring())
      length = len(self.state.ft_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ft_sensors:
        _v61 = val1.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = val1.wrench
        _v64 = _v63.force
        _x = _v64
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.torque
        _x = _v65
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.state.patches)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.patches:
        _v66 = val1.header
        _x = _v66.seq
        buff.write(_get_struct_I().pack(_x))
        _v67 = _v66.stamp
        _x = _v67
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v66.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v68 = val1.pose
        _v69 = _v68.position
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v70 = _v68.orientation
        _x = _v70
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v71 = val1.force
        _v72 = _v71.min
        _x = _v72.data
        buff.write(_get_struct_d().pack(_x))
        _v73 = _v71.max
        _x = _v73.data
        buff.write(_get_struct_d().pack(_x))
        _v74 = _v71.area
        _x = _v74.data
        buff.write(_get_struct_d().pack(_x))
        _v75 = _v71.cop
        _x = _v75
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v76 = _v71.wrench
        _v77 = _v76.force
        _x = _v77
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v78 = _v76.torque
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v79 = _v71.hull
        length = len(_v79.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v79.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v80 = val1.proximity
        _v81 = _v80.min
        _x = _v81.data
        buff.write(_get_struct_d().pack(_x))
        _v82 = _v80.max
        _x = _v82.data
        buff.write(_get_struct_d().pack(_x))
        _v83 = _v80.area
        _x = _v83.data
        buff.write(_get_struct_d().pack(_x))
        _v84 = _v80.cop
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v85 = _v80.wrench
        _v86 = _v85.force
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v87 = _v85.torque
        _x = _v87
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v88 = _v80.hull
        length = len(_v88.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v88.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v89 = val1.min_dist
        _x = _v89.data
        buff.write(_get_struct_d().pack(_x))
        _v90 = val1.max_dist
        _x = _v90.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = control_core_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.position.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.velocity.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.joints.acceleration.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 164
      (_x.state.floating_base.position.position.x, _x.state.floating_base.position.position.y, _x.state.floating_base.position.position.z, _x.state.floating_base.position.orientation.x, _x.state.floating_base.position.orientation.y, _x.state.floating_base.position.orientation.z, _x.state.floating_base.position.orientation.w, _x.state.floating_base.velocity.linear.x, _x.state.floating_base.velocity.linear.y, _x.state.floating_base.velocity.linear.z, _x.state.floating_base.velocity.angular.x, _x.state.floating_base.velocity.angular.y, _x.state.floating_base.velocity.angular.z, _x.state.floating_base.acceleration.linear.x, _x.state.floating_base.acceleration.linear.y, _x.state.floating_base.acceleration.linear.z, _x.state.floating_base.acceleration.angular.x, _x.state.floating_base.acceleration.angular.y, _x.state.floating_base.acceleration.angular.z, _x.state.imu.header.seq, _x.state.imu.header.stamp.secs, _x.state.imu.header.stamp.nsecs,) = _get_struct_19d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.state.imu.orientation.x, _x.state.imu.orientation.y, _x.state.imu.orientation.z, _x.state.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.state.imu.angular_velocity.x, _x.state.imu.angular_velocity.y, _x.state.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.state.imu.linear_acceleration.x, _x.state.imu.linear_acceleration.y, _x.state.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.state.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ft_sensors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.WrenchStamped()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = str[start:end]
        _v93 = val1.wrench
        _v94 = _v93.force
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v95 = _v93.torque
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.state.ft_sensors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.patches = []
      for i in range(0, length):
        val1 = control_core_msgs.msg.SkinPatch()
        _v96 = val1.header
        start = end
        end += 4
        (_v96.seq,) = _get_struct_I().unpack(str[start:end])
        _v97 = _v96.stamp
        _x = _v97
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v96.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v96.frame_id = str[start:end]
        _v98 = val1.pose
        _v99 = _v98.position
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v100 = _v98.orientation
        _x = _v100
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v101 = val1.force
        _v102 = _v101.min
        start = end
        end += 8
        (_v102.data,) = _get_struct_d().unpack(str[start:end])
        _v103 = _v101.max
        start = end
        end += 8
        (_v103.data,) = _get_struct_d().unpack(str[start:end])
        _v104 = _v101.area
        start = end
        end += 8
        (_v104.data,) = _get_struct_d().unpack(str[start:end])
        _v105 = _v101.cop
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v106 = _v101.wrench
        _v107 = _v106.force
        _x = _v107
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v108 = _v106.torque
        _x = _v108
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v109 = _v101.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v109.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v109.points.append(val4)
        _v110 = val1.proximity
        _v111 = _v110.min
        start = end
        end += 8
        (_v111.data,) = _get_struct_d().unpack(str[start:end])
        _v112 = _v110.max
        start = end
        end += 8
        (_v112.data,) = _get_struct_d().unpack(str[start:end])
        _v113 = _v110.area
        start = end
        end += 8
        (_v113.data,) = _get_struct_d().unpack(str[start:end])
        _v114 = _v110.cop
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v115 = _v110.wrench
        _v116 = _v115.force
        _x = _v116
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v117 = _v115.torque
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v118 = _v110.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v118.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v118.points.append(val4)
        _v119 = val1.min_dist
        start = end
        end += 8
        (_v119.data,) = _get_struct_d().unpack(str[start:end])
        _v120 = val1.max_dist
        start = end
        end += 8
        (_v120.data,) = _get_struct_d().unpack(str[start:end])
        self.state.patches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19d3I = None
def _get_struct_19d3I():
    global _struct_19d3I
    if _struct_19d3I is None:
        _struct_19d3I = struct.Struct("<19d3I")
    return _struct_19d3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class StartControl(object):
  _type          = 'control_core_msgs/StartControl'
  _md5sum = 'adb9278d966383f41d079c269f203a93'
  _request_class  = StartControlRequest
  _response_class = StartControlResponse
