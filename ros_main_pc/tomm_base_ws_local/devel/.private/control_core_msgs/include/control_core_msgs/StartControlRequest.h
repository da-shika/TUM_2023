// Generated by gencpp from file control_core_msgs/StartControlRequest.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_STARTCONTROLREQUEST_H
#define CONTROL_CORE_MSGS_MESSAGE_STARTCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_core_msgs
{
template <class ContainerAllocator>
struct StartControlRequest_
{
  typedef StartControlRequest_<ContainerAllocator> Type;

  StartControlRequest_()
    : CONNECTION_STATE_INIT(0)
    , CONNECTION_STATE_START(0)
    , connection_state(0)  {
    }
  StartControlRequest_(const ContainerAllocator& _alloc)
    : CONNECTION_STATE_INIT(0)
    , CONNECTION_STATE_START(0)
    , connection_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _CONNECTION_STATE_INIT_type;
  _CONNECTION_STATE_INIT_type CONNECTION_STATE_INIT;

   typedef uint8_t _CONNECTION_STATE_START_type;
  _CONNECTION_STATE_START_type CONNECTION_STATE_START;

   typedef uint8_t _connection_state_type;
  _connection_state_type connection_state;





  typedef boost::shared_ptr< ::control_core_msgs::StartControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::StartControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartControlRequest_

typedef ::control_core_msgs::StartControlRequest_<std::allocator<void> > StartControlRequest;

typedef boost::shared_ptr< ::control_core_msgs::StartControlRequest > StartControlRequestPtr;
typedef boost::shared_ptr< ::control_core_msgs::StartControlRequest const> StartControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::StartControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::StartControlRequest_<ContainerAllocator1> & lhs, const ::control_core_msgs::StartControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.CONNECTION_STATE_INIT == rhs.CONNECTION_STATE_INIT &&
    lhs.CONNECTION_STATE_START == rhs.CONNECTION_STATE_START &&
    lhs.connection_state == rhs.connection_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::StartControlRequest_<ContainerAllocator1> & lhs, const ::control_core_msgs::StartControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::StartControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::StartControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::StartControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e03965fe6f41486397643b5f0d2b3fb";
  }

  static const char* value(const ::control_core_msgs::StartControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e03965fe6f41486ULL;
  static const uint64_t static_value2 = 0x397643b5f0d2b3fbULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/StartControlRequest";
  }

  static const char* value(const ::control_core_msgs::StartControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CONNECTION_STATE_INIT\n"
"uint8 CONNECTION_STATE_START\n"
"uint8 connection_state          # connection state\n"
;
  }

  static const char* value(const ::control_core_msgs::StartControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CONNECTION_STATE_INIT);
      stream.next(m.CONNECTION_STATE_START);
      stream.next(m.connection_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::StartControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::StartControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "CONNECTION_STATE_INIT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CONNECTION_STATE_INIT);
    s << indent << "CONNECTION_STATE_START: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CONNECTION_STATE_START);
    s << indent << "connection_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_STARTCONTROLREQUEST_H
