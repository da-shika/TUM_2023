// Generated by gencpp from file control_core_msgs/Contact.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_CONTACT_H
#define CONTROL_CORE_MSGS_MESSAGE_CONTACT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float64.h>

namespace control_core_msgs
{
template <class ContainerAllocator>
struct Contact_
{
  typedef Contact_<ContainerAllocator> Type;

  Contact_()
    : pose()
    , hull()
    , offset()
    , friction()  {
    }
  Contact_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , hull(_alloc)
    , offset(_alloc)
    , friction(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _hull_type;
  _hull_type hull;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _friction_type;
  _friction_type friction;





  typedef boost::shared_ptr< ::control_core_msgs::Contact_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::Contact_<ContainerAllocator> const> ConstPtr;

}; // struct Contact_

typedef ::control_core_msgs::Contact_<std::allocator<void> > Contact;

typedef boost::shared_ptr< ::control_core_msgs::Contact > ContactPtr;
typedef boost::shared_ptr< ::control_core_msgs::Contact const> ContactConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::Contact_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::Contact_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::Contact_<ContainerAllocator1> & lhs, const ::control_core_msgs::Contact_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.hull == rhs.hull &&
    lhs.offset == rhs.offset &&
    lhs.friction == rhs.friction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::Contact_<ContainerAllocator1> & lhs, const ::control_core_msgs::Contact_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::Contact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::Contact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::Contact_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::Contact_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "092ef89bc484cc9b681ba742d6241a00";
  }

  static const char* value(const ::control_core_msgs::Contact_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x092ef89bc484cc9bULL;
  static const uint64_t static_value2 = 0x681ba742d6241a00ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/Contact";
  }

  static const char* value(const ::control_core_msgs::Contact_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Point offset\n"
"std_msgs/Float64 friction\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::control_core_msgs::Contact_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::Contact_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.hull);
      stream.next(m.offset);
      stream.next(m.friction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contact_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::Contact_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::Contact_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "hull: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.hull);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "friction: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.friction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_CONTACT_H
