// Generated by gencpp from file control_core_msgs/BodyId.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_BODYID_H
#define CONTROL_CORE_MSGS_MESSAGE_BODYID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_core_msgs
{
template <class ContainerAllocator>
struct BodyId_
{
  typedef BodyId_<ContainerAllocator> Type;

  BodyId_()
    : id(0)  {
    }
  BodyId_(const ContainerAllocator& _alloc)
    : id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ID_LEFT_FOOT)
  #undef ID_LEFT_FOOT
#endif
#if defined(_WIN32) && defined(ID_RIGHT_FOOT)
  #undef ID_RIGHT_FOOT
#endif
#if defined(_WIN32) && defined(ID_LEFT_HAND)
  #undef ID_LEFT_HAND
#endif
#if defined(_WIN32) && defined(ID_RIGHT_HAND)
  #undef ID_RIGHT_HAND
#endif

  enum {
    ID_LEFT_FOOT = 0u,
    ID_RIGHT_FOOT = 1u,
    ID_LEFT_HAND = 2u,
    ID_RIGHT_HAND = 3u,
  };


  typedef boost::shared_ptr< ::control_core_msgs::BodyId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::BodyId_<ContainerAllocator> const> ConstPtr;

}; // struct BodyId_

typedef ::control_core_msgs::BodyId_<std::allocator<void> > BodyId;

typedef boost::shared_ptr< ::control_core_msgs::BodyId > BodyIdPtr;
typedef boost::shared_ptr< ::control_core_msgs::BodyId const> BodyIdConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::BodyId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::BodyId_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::BodyId_<ContainerAllocator1> & lhs, const ::control_core_msgs::BodyId_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::BodyId_<ContainerAllocator1> & lhs, const ::control_core_msgs::BodyId_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::BodyId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::BodyId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::BodyId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::BodyId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::BodyId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::BodyId_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::BodyId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a385781e43d45f99df1603234266a10e";
  }

  static const char* value(const ::control_core_msgs::BodyId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa385781e43d45f99ULL;
  static const uint64_t static_value2 = 0xdf1603234266a10eULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::BodyId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/BodyId";
  }

  static const char* value(const ::control_core_msgs::BodyId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::BodyId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID_LEFT_FOOT=0\n"
"uint8 ID_RIGHT_FOOT=1\n"
"uint8 ID_LEFT_HAND=2\n"
"uint8 ID_RIGHT_HAND=3\n"
"uint8 id\n"
;
  }

  static const char* value(const ::control_core_msgs::BodyId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::BodyId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::BodyId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::BodyId_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_BODYID_H
