// Generated by gencpp from file control_core_msgs/SkinPatches.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_SKINPATCHES_H
#define CONTROL_CORE_MSGS_MESSAGE_SKINPATCHES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <control_core_msgs/SkinPatch.h>

namespace control_core_msgs
{
template <class ContainerAllocator>
struct SkinPatches_
{
  typedef SkinPatches_<ContainerAllocator> Type;

  SkinPatches_()
    : patches()  {
    }
  SkinPatches_(const ContainerAllocator& _alloc)
    : patches(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::control_core_msgs::SkinPatch_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::control_core_msgs::SkinPatch_<ContainerAllocator> >> _patches_type;
  _patches_type patches;





  typedef boost::shared_ptr< ::control_core_msgs::SkinPatches_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::SkinPatches_<ContainerAllocator> const> ConstPtr;

}; // struct SkinPatches_

typedef ::control_core_msgs::SkinPatches_<std::allocator<void> > SkinPatches;

typedef boost::shared_ptr< ::control_core_msgs::SkinPatches > SkinPatchesPtr;
typedef boost::shared_ptr< ::control_core_msgs::SkinPatches const> SkinPatchesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::SkinPatches_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::SkinPatches_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::SkinPatches_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinPatches_<ContainerAllocator2> & rhs)
{
  return lhs.patches == rhs.patches;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::SkinPatches_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinPatches_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinPatches_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinPatches_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinPatches_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54325af118430bc2db92b5f684606b52";
  }

  static const char* value(const ::control_core_msgs::SkinPatches_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54325af118430bc2ULL;
  static const uint64_t static_value2 = 0xdb92b5f684606b52ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/SkinPatches";
  }

  static const char* value(const ::control_core_msgs::SkinPatches_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SkinPatch[] patches\n"
"================================================================================\n"
"MSG: control_core_msgs/SkinPatch\n"
"std_msgs/Header header\n"
"geometry_msgs/Pose pose\n"
"SkinModality force\n"
"SkinModality proximity\n"
"std_msgs/Float64 min_dist\n"
"std_msgs/Float64 max_dist\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: control_core_msgs/SkinModality\n"
"std_msgs/Float64 min\n"
"std_msgs/Float64 max\n"
"std_msgs/Float64 area\n"
"geometry_msgs/Point cop\n"
"geometry_msgs/Wrench wrench\n"
"geometry_msgs/Polygon hull\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::control_core_msgs::SkinPatches_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.patches);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkinPatches_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::SkinPatches_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::SkinPatches_<ContainerAllocator>& v)
  {
    s << indent << "patches[]" << std::endl;
    for (size_t i = 0; i < v.patches.size(); ++i)
    {
      s << indent << "  patches[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::control_core_msgs::SkinPatch_<ContainerAllocator> >::stream(s, indent + "    ", v.patches[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_SKINPATCHES_H
