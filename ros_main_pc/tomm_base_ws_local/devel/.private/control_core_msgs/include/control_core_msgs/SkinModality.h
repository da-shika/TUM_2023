// Generated by gencpp from file control_core_msgs/SkinModality.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_SKINMODALITY_H
#define CONTROL_CORE_MSGS_MESSAGE_SKINMODALITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Polygon.h>

namespace control_core_msgs
{
template <class ContainerAllocator>
struct SkinModality_
{
  typedef SkinModality_<ContainerAllocator> Type;

  SkinModality_()
    : min()
    , max()
    , area()
    , cop()
    , wrench()
    , hull()  {
    }
  SkinModality_(const ContainerAllocator& _alloc)
    : min(_alloc)
    , max(_alloc)
    , area(_alloc)
    , cop(_alloc)
    , wrench(_alloc)
    , hull(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _max_type;
  _max_type max;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _area_type;
  _area_type area;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _cop_type;
  _cop_type cop;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _hull_type;
  _hull_type hull;





  typedef boost::shared_ptr< ::control_core_msgs::SkinModality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::SkinModality_<ContainerAllocator> const> ConstPtr;

}; // struct SkinModality_

typedef ::control_core_msgs::SkinModality_<std::allocator<void> > SkinModality;

typedef boost::shared_ptr< ::control_core_msgs::SkinModality > SkinModalityPtr;
typedef boost::shared_ptr< ::control_core_msgs::SkinModality const> SkinModalityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::SkinModality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::SkinModality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::SkinModality_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinModality_<ContainerAllocator2> & rhs)
{
  return lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.area == rhs.area &&
    lhs.cop == rhs.cop &&
    lhs.wrench == rhs.wrench &&
    lhs.hull == rhs.hull;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::SkinModality_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinModality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinModality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinModality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinModality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinModality_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinModality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinModality_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::SkinModality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db74e377abd390ca1fca36f1294853e5";
  }

  static const char* value(const ::control_core_msgs::SkinModality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb74e377abd390caULL;
  static const uint64_t static_value2 = 0x1fca36f1294853e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::SkinModality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/SkinModality";
  }

  static const char* value(const ::control_core_msgs::SkinModality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::SkinModality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 min\n"
"std_msgs/Float64 max\n"
"std_msgs/Float64 area\n"
"geometry_msgs/Point cop\n"
"geometry_msgs/Wrench wrench\n"
"geometry_msgs/Polygon hull\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::control_core_msgs::SkinModality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::SkinModality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.area);
      stream.next(m.cop);
      stream.next(m.wrench);
      stream.next(m.hull);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkinModality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::SkinModality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::SkinModality_<ContainerAllocator>& v)
  {
    s << indent << "min: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
    s << indent << "area: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.area);
    s << indent << "cop: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.cop);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "hull: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.hull);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_SKINMODALITY_H
