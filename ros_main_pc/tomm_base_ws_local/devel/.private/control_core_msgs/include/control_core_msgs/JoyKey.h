// Generated by gencpp from file control_core_msgs/JoyKey.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_JOYKEY_H
#define CONTROL_CORE_MSGS_MESSAGE_JOYKEY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_core_msgs
{
template <class ContainerAllocator>
struct JoyKey_
{
  typedef JoyKey_<ContainerAllocator> Type;

  JoyKey_()
    {
    }
  JoyKey_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(KEY_A)
  #undef KEY_A
#endif
#if defined(_WIN32) && defined(KEY_B)
  #undef KEY_B
#endif
#if defined(_WIN32) && defined(KEY_X)
  #undef KEY_X
#endif
#if defined(_WIN32) && defined(KEY_Y)
  #undef KEY_Y
#endif
#if defined(_WIN32) && defined(KEY_LB)
  #undef KEY_LB
#endif
#if defined(_WIN32) && defined(KEY_RB)
  #undef KEY_RB
#endif
#if defined(_WIN32) && defined(JOY_LX)
  #undef JOY_LX
#endif
#if defined(_WIN32) && defined(JOY_LY)
  #undef JOY_LY
#endif
#if defined(_WIN32) && defined(JOY_LT)
  #undef JOY_LT
#endif
#if defined(_WIN32) && defined(JOY_RX)
  #undef JOY_RX
#endif
#if defined(_WIN32) && defined(JOY_RY)
  #undef JOY_RY
#endif
#if defined(_WIN32) && defined(JOY_RT)
  #undef JOY_RT
#endif
#if defined(_WIN32) && defined(ARROW_LEFT_RIGHT)
  #undef ARROW_LEFT_RIGHT
#endif
#if defined(_WIN32) && defined(ARROW_UP_DOWN)
  #undef ARROW_UP_DOWN
#endif

  enum {
    KEY_A = 0u,
    KEY_B = 1u,
    KEY_X = 2u,
    KEY_Y = 3u,
    KEY_LB = 4u,
    KEY_RB = 5u,
    JOY_LX = 0u,
    JOY_LY = 1u,
    JOY_LT = 2u,
    JOY_RX = 3u,
    JOY_RY = 4u,
    JOY_RT = 5u,
    ARROW_LEFT_RIGHT = 6u,
    ARROW_UP_DOWN = 7u,
  };


  typedef boost::shared_ptr< ::control_core_msgs::JoyKey_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::JoyKey_<ContainerAllocator> const> ConstPtr;

}; // struct JoyKey_

typedef ::control_core_msgs::JoyKey_<std::allocator<void> > JoyKey;

typedef boost::shared_ptr< ::control_core_msgs::JoyKey > JoyKeyPtr;
typedef boost::shared_ptr< ::control_core_msgs::JoyKey const> JoyKeyConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::JoyKey_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::JoyKey_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::JoyKey_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::JoyKey_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::JoyKey_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::JoyKey_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::JoyKey_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::JoyKey_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::JoyKey_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d7dd2dc15a1d1ee57b8e83eb173156c";
  }

  static const char* value(const ::control_core_msgs::JoyKey_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d7dd2dc15a1d1eeULL;
  static const uint64_t static_value2 = 0x57b8e83eb173156cULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::JoyKey_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/JoyKey";
  }

  static const char* value(const ::control_core_msgs::JoyKey_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::JoyKey_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Keys for the Logitech F710 controller\n"
"# Note: The controller mode is set to 'X'\n"
"\n"
"uint8 KEY_A=0\n"
"uint8 KEY_B=1\n"
"uint8 KEY_X=2\n"
"uint8 KEY_Y=3\n"
"uint8 KEY_LB=4\n"
"uint8 KEY_RB=5\n"
"uint8 JOY_LX=0\n"
"uint8 JOY_LY=1\n"
"uint8 JOY_LT=2\n"
"uint8 JOY_RX=3\n"
"uint8 JOY_RY=4\n"
"uint8 JOY_RT=5\n"
"uint8 ARROW_LEFT_RIGHT=6\n"
"uint8 ARROW_UP_DOWN=7\n"
;
  }

  static const char* value(const ::control_core_msgs::JoyKey_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::JoyKey_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyKey_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::JoyKey_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::control_core_msgs::JoyKey_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_JOYKEY_H
