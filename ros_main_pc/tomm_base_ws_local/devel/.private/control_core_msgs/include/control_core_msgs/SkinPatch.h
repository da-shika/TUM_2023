// Generated by gencpp from file control_core_msgs/SkinPatch.msg
// DO NOT EDIT!


#ifndef CONTROL_CORE_MSGS_MESSAGE_SKINPATCH_H
#define CONTROL_CORE_MSGS_MESSAGE_SKINPATCH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <control_core_msgs/SkinModality.h>
#include <control_core_msgs/SkinModality.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace control_core_msgs
{
template <class ContainerAllocator>
struct SkinPatch_
{
  typedef SkinPatch_<ContainerAllocator> Type;

  SkinPatch_()
    : header()
    , pose()
    , force()
    , proximity()
    , min_dist()
    , max_dist()  {
    }
  SkinPatch_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , force(_alloc)
    , proximity(_alloc)
    , min_dist(_alloc)
    , max_dist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::control_core_msgs::SkinModality_<ContainerAllocator>  _force_type;
  _force_type force;

   typedef  ::control_core_msgs::SkinModality_<ContainerAllocator>  _proximity_type;
  _proximity_type proximity;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _min_dist_type;
  _min_dist_type min_dist;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _max_dist_type;
  _max_dist_type max_dist;





  typedef boost::shared_ptr< ::control_core_msgs::SkinPatch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_core_msgs::SkinPatch_<ContainerAllocator> const> ConstPtr;

}; // struct SkinPatch_

typedef ::control_core_msgs::SkinPatch_<std::allocator<void> > SkinPatch;

typedef boost::shared_ptr< ::control_core_msgs::SkinPatch > SkinPatchPtr;
typedef boost::shared_ptr< ::control_core_msgs::SkinPatch const> SkinPatchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_core_msgs::SkinPatch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_core_msgs::SkinPatch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_core_msgs::SkinPatch_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinPatch_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.force == rhs.force &&
    lhs.proximity == rhs.proximity &&
    lhs.min_dist == rhs.min_dist &&
    lhs.max_dist == rhs.max_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_core_msgs::SkinPatch_<ContainerAllocator1> & lhs, const ::control_core_msgs::SkinPatch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_core_msgs::SkinPatch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_core_msgs::SkinPatch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_core_msgs::SkinPatch_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5c4ba5fbedd1c63abbdd1a1450dda87";
  }

  static const char* value(const ::control_core_msgs::SkinPatch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5c4ba5fbedd1c63ULL;
  static const uint64_t static_value2 = 0xabbdd1a1450dda87ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/SkinPatch";
  }

  static const char* value(const ::control_core_msgs::SkinPatch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Pose pose\n"
"SkinModality force\n"
"SkinModality proximity\n"
"std_msgs/Float64 min_dist\n"
"std_msgs/Float64 max_dist\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: control_core_msgs/SkinModality\n"
"std_msgs/Float64 min\n"
"std_msgs/Float64 max\n"
"std_msgs/Float64 area\n"
"geometry_msgs/Point cop\n"
"geometry_msgs/Wrench wrench\n"
"geometry_msgs/Polygon hull\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::control_core_msgs::SkinPatch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.force);
      stream.next(m.proximity);
      stream.next(m.min_dist);
      stream.next(m.max_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkinPatch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_core_msgs::SkinPatch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_core_msgs::SkinPatch_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "force: ";
    s << std::endl;
    Printer< ::control_core_msgs::SkinModality_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "proximity: ";
    s << std::endl;
    Printer< ::control_core_msgs::SkinModality_<ContainerAllocator> >::stream(s, indent + "  ", v.proximity);
    s << indent << "min_dist: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.min_dist);
    s << indent << "max_dist: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.max_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_CORE_MSGS_MESSAGE_SKINPATCH_H
