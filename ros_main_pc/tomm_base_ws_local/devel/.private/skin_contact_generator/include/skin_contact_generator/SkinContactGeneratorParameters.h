// *********************************************************
//
// File autogenerated for the skin_contact_generator package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <control_core/ros/parameters.h>
#include <rosparam_handler/utilities_std.h>
#include <control_core/types.h>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <skin_contact_generator/SkinContactGeneratorConfig.h>
#include <dynamic_reconfigure/server.h>
namespace skin_contact_generator
{
    typedef dynamic_reconfigure::Server<SkinContactGeneratorConfig> SkinContactGeneratorServer;
}
#else
namespace skin_contact_generator
{
    struct SkinContactGeneratorConfig{};
    struct SkinContactGeneratorServer{};
}
#endif


namespace skin_contact_generator {

/// \brief Parameter struct generated by rosparam_handler
class SkinContactGeneratorParameters : public cc::Parameters {

public:
  typedef cc::Parameters Base;
  using Config = SkinContactGeneratorConfig;

public:
  SkinContactGeneratorParameters()
  : Base(), config_updated_once_(false)
  {
    addToList();
  }

  SkinContactGeneratorParameters(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="")
  : Base(private_node_handle, private_namespace), config_updated_once_(false) 
  {
    addToList();
  }

  ~SkinContactGeneratorParameters() { }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer() {
    bool success = true;
    success &= utilities_std::getParam(private_namespace_ + "active_distance", active_distance);
    success &= utilities_std::getParam(private_namespace_ + "cluster_tolerance", cluster_tolerance, double{0.03});
    success &= utilities_std::getParam(private_namespace_ + "cluster_min_size", cluster_min_size, double{3});
    success &= utilities_std::getParam(private_namespace_ + "cluster_max_size", cluster_max_size, double{100});
    success &= utilities_std::getParam(private_namespace_ + "masked_patches", masked_patches, std::vector<std::string>{""});

    if(!success){
      missingParamsWarning();
      ROS_ERROR("RosparamHandler: GetParam could not retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
    is_loaded_ = true;
    return success;
  }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="") {
    private_namespace_ = rosparam_handler::joinNamespaces({private_node_handle.getNamespace(), private_namespace});
    node_name_ = rosparam_handler::getNodeName(private_node_handle);
    is_init_ = true;
    return fromParamServer();
  }

  /// \brief Set parameters on ROS parameter server.
  bool toParamServer() {
  utilities_std::setParam(private_namespace_ + "active_distance",active_distance);
  utilities_std::setParam(private_namespace_ + "cluster_tolerance",cluster_tolerance);
  utilities_std::setParam(private_namespace_ + "cluster_min_size",cluster_min_size);
  utilities_std::setParam(private_namespace_ + "cluster_max_size",cluster_max_size);
  utilities_std::setParam(private_namespace_ + "masked_patches",masked_patches);
    return true;        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND

#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  void toConfig(Config& config) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
    
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  Config asConfig() const {
    Config config;
#ifdef DYNAMIC_RECONFIGURE_FOUND
    
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
    return config;
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void updateConfig(Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
  if(!config_updated_once_)
  {
    // first update, override config
    config_updated_once_ = true;
    toConfig(config);
  }
  else
  {
    // subsequent update, read from config
    fromConfig(config, level);
  }
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So updateConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const SkinContactGeneratorParameters& p)
  {
    os << "[" << p.node_name_ << "]\nNode " << p.node_name_ << " has the following parameters:\n"
      << "	" << p.private_namespace_ << "active_distance:" << p.active_distance << "\n"
      << "	" << p.private_namespace_ << "cluster_tolerance:" << p.cluster_tolerance << "\n"
      << "	" << p.private_namespace_ << "cluster_min_size:" << p.cluster_min_size << "\n"
      << "	" << p.private_namespace_ << "cluster_max_size:" << p.cluster_max_size << "\n"
      << "	" << p.private_namespace_ << "masked_patches:" << utilities_std::to_string(p.masked_patches) << "\n"
;
    return os;
  }

public:
    double active_distance; /*!<  */
  double cluster_tolerance; /*!<  */
  double cluster_min_size; /*!<  */
  double cluster_max_size; /*!<  */
  std::vector<std::string> masked_patches; /*!<  */

private:
  bool config_updated_once_;
  /// \brief Add them to the parmeter list
  void addToList() {
        Base::addReference("active_distance", active_distance);
    Base::addReference("cluster_tolerance", cluster_tolerance);
    Base::addReference("cluster_min_size", cluster_min_size);
    Base::addReference("cluster_max_size", cluster_max_size);
    Base::addReference("masked_patches", masked_patches);
  }

  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << node_name_ << "]\nThe following parameters do not have default values and need to be specified:\n"
      << "	" << private_namespace_ << "active_distance" << " (double) \n"
    );
  }
};

} // namespace skin_contact_generator
