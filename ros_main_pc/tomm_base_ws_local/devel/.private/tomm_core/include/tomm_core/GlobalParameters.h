// *********************************************************
//
// File autogenerated for the tomm_core package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <control_core/ros/parameters.h>
#include <rosparam_handler/utilities_std.h>
#include <control_core/types.h>
#include <rosparam_handler/utilities_eigen.h>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <tomm_core/GlobalConfig.h>
#include <dynamic_reconfigure/server.h>
namespace tomm_core
{
    typedef dynamic_reconfigure::Server<GlobalConfig> GlobalServer;
}
#else
namespace tomm_core
{
    struct GlobalConfig{};
    struct GlobalServer{};
}
#endif


namespace tomm_core {

/// \brief Parameter struct generated by rosparam_handler
class GlobalParameters : public cc::Parameters {

public:
  typedef cc::Parameters Base;
  using Config = GlobalConfig;

public:
  GlobalParameters()
  : Base(), config_updated_once_(false)
  {
    addToList();
  }

  GlobalParameters(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="")
  : Base(private_node_handle, private_namespace), config_updated_once_(false) 
  {
    addToList();
  }

  ~GlobalParameters() { }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer() {
    bool success = true;
    success &= utilities_std::getParam(private_namespace_ + "prefix", prefix);
    success &= utilities_std::getParam(private_namespace_ + "tf_prefix", tf_prefix, std::string{""});
    success &= utilities_std::getParam(private_namespace_ + "simulation", simulation);
    success &= utilities_std::getParam(private_namespace_ + "loop_rate", loop_rate);
    success &= utilities_std::getParam(private_namespace_ + "publish_rate", publish_rate);
    success &= utilities_std::getParam(private_namespace_ + "homing_period", homing_period);
    success &= utilities_eigen::getParam(private_namespace_ + "handprint_x", handprint_x);
    success &= utilities_eigen::getParam(private_namespace_ + "handprint_y", handprint_y);
    success &= utilities_eigen::getParam(private_namespace_ + "home_posture", home_posture);

    if(!success){
      missingParamsWarning();
      ROS_ERROR("RosparamHandler: GetParam could not retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
    is_loaded_ = true;
    return success;
  }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="") {
    private_namespace_ = rosparam_handler::joinNamespaces({private_node_handle.getNamespace(), private_namespace});
    node_name_ = rosparam_handler::getNodeName(private_node_handle);
    is_init_ = true;
    return fromParamServer();
  }

  /// \brief Set parameters on ROS parameter server.
  bool toParamServer() {
  utilities_std::setParam(private_namespace_ + "prefix",prefix);
  utilities_std::setParam(private_namespace_ + "tf_prefix",tf_prefix);
  utilities_std::setParam(private_namespace_ + "simulation",simulation);
  utilities_std::setParam(private_namespace_ + "loop_rate",loop_rate);
  utilities_std::setParam(private_namespace_ + "publish_rate",publish_rate);
  utilities_std::setParam(private_namespace_ + "homing_period",homing_period);
  utilities_eigen::setParam(private_namespace_ + "handprint_x",handprint_x);
  utilities_eigen::setParam(private_namespace_ + "handprint_y",handprint_y);
  utilities_eigen::setParam(private_namespace_ + "home_posture",home_posture);
    return true;        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND

#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  void toConfig(Config& config) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
    
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  Config asConfig() const {
    Config config;
#ifdef DYNAMIC_RECONFIGURE_FOUND
    
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
    return config;
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void updateConfig(Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
  if(!config_updated_once_)
  {
    // first update, override config
    config_updated_once_ = true;
    toConfig(config);
  }
  else
  {
    // subsequent update, read from config
    fromConfig(config, level);
  }
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So updateConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const GlobalParameters& p)
  {
    os << "[" << p.node_name_ << "]\nNode " << p.node_name_ << " has the following parameters:\n"
      << "	" << p.private_namespace_ << "prefix:" << p.prefix << "\n"
      << "	" << p.private_namespace_ << "tf_prefix:" << p.tf_prefix << "\n"
      << "	" << p.private_namespace_ << "simulation:" << p.simulation << "\n"
      << "	" << p.private_namespace_ << "loop_rate:" << p.loop_rate << "\n"
      << "	" << p.private_namespace_ << "publish_rate:" << p.publish_rate << "\n"
      << "	" << p.private_namespace_ << "homing_period:" << p.homing_period << "\n"
      << "	" << p.private_namespace_ << "handprint_x:" << utilities_eigen::to_string(p.handprint_x) << "\n"
      << "	" << p.private_namespace_ << "handprint_y:" << utilities_eigen::to_string(p.handprint_y) << "\n"
      << "	" << p.private_namespace_ << "home_posture:" << utilities_eigen::to_string(p.home_posture) << "\n"
;
    return os;
  }

public:
    std::string prefix; /*!<  */
  std::string tf_prefix; /*!<  */
  bool simulation; /*!<  */
  double loop_rate; /*!<  */
  double publish_rate; /*!<  */
  double homing_period; /*!<  */
  cc::Vector2 handprint_x; /*!<  */
  cc::Vector2 handprint_y; /*!<  */
  cc::JointPosition home_posture; /*!<  */

private:
  bool config_updated_once_;
  /// \brief Add them to the parmeter list
  void addToList() {
        Base::addReference("prefix", prefix);
    Base::addReference("tf_prefix", tf_prefix);
    Base::addReference("simulation", simulation);
    Base::addReference("loop_rate", loop_rate);
    Base::addReference("publish_rate", publish_rate);
    Base::addReference("homing_period", homing_period);
    Base::addReference("handprint_x", handprint_x);
    Base::addReference("handprint_y", handprint_y);
    Base::addReference("home_posture", home_posture);
  }

  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << node_name_ << "]\nThe following parameters do not have default values and need to be specified:\n"
      << "	" << private_namespace_ << "prefix" << " (std::string) \n"
      << "	" << private_namespace_ << "simulation" << " (bool) \n"
      << "	" << private_namespace_ << "loop_rate" << " (double) \n"
      << "	" << private_namespace_ << "publish_rate" << " (double) \n"
      << "	" << private_namespace_ << "homing_period" << " (double) \n"
      << "	" << private_namespace_ << "handprint_x" << " (cc::Vector2) \n"
      << "	" << private_namespace_ << "handprint_y" << " (cc::Vector2) \n"
      << "	" << private_namespace_ << "home_posture" << " (cc::JointPosition) \n"
    );
  }
};

} // namespace tomm_core
