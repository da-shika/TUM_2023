// Generated by gencpp from file ur_script_manager/getScriptManagerStatesResponse.msg
// DO NOT EDIT!


#ifndef UR_SCRIPT_MANAGER_MESSAGE_GETSCRIPTMANAGERSTATESRESPONSE_H
#define UR_SCRIPT_MANAGER_MESSAGE_GETSCRIPTMANAGERSTATESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_script_manager
{
template <class ContainerAllocator>
struct getScriptManagerStatesResponse_
{
  typedef getScriptManagerStatesResponse_<ContainerAllocator> Type;

  getScriptManagerStatesResponse_()
    : names()
    , enabled()  {
    }
  getScriptManagerStatesResponse_(const ContainerAllocator& _alloc)
    : names(_alloc)
    , enabled(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getScriptManagerStatesResponse_

typedef ::ur_script_manager::getScriptManagerStatesResponse_<std::allocator<void> > getScriptManagerStatesResponse;

typedef boost::shared_ptr< ::ur_script_manager::getScriptManagerStatesResponse > getScriptManagerStatesResponsePtr;
typedef boost::shared_ptr< ::ur_script_manager::getScriptManagerStatesResponse const> getScriptManagerStatesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator1> & lhs, const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.names == rhs.names &&
    lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator1> & lhs, const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_script_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44bb719088af7b4a0bc3023901924bc8";
  }

  static const char* value(const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44bb719088af7b4aULL;
  static const uint64_t static_value2 = 0x0bc3023901924bc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_script_manager/getScriptManagerStatesResponse";
  }

  static const char* value(const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] names		# the names of the script sub programs\n"
"bool[] enabled		# the states of the script sub programs\n"
"\n"
;
  }

  static const char* value(const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.names);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getScriptManagerStatesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_script_manager::getScriptManagerStatesResponse_<ContainerAllocator>& v)
  {
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "enabled[]" << std::endl;
    for (size_t i = 0; i < v.enabled.size(); ++i)
    {
      s << indent << "  enabled[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.enabled[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_SCRIPT_MANAGER_MESSAGE_GETSCRIPTMANAGERSTATESRESPONSE_H
