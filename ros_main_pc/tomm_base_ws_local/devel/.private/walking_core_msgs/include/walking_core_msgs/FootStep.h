// Generated by gencpp from file walking_core_msgs/FootStep.msg
// DO NOT EDIT!


#ifndef WALKING_CORE_MSGS_MESSAGE_FOOTSTEP_H
#define WALKING_CORE_MSGS_MESSAGE_FOOTSTEP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <control_core_msgs/Contact.h>
#include <std_msgs/Int64.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Int64.h>

namespace walking_core_msgs
{
template <class ContainerAllocator>
struct FootStep_
{
  typedef FootStep_<ContainerAllocator> Type;

  FootStep_()
    : contact()
    , body_id()
    , final_step()
    , n_step()  {
    }
  FootStep_(const ContainerAllocator& _alloc)
    : contact(_alloc)
    , body_id(_alloc)
    , final_step(_alloc)
    , n_step(_alloc)  {
  (void)_alloc;
    }



   typedef  ::control_core_msgs::Contact_<ContainerAllocator>  _contact_type;
  _contact_type contact;

   typedef  ::std_msgs::Int64_<ContainerAllocator>  _body_id_type;
  _body_id_type body_id;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _final_step_type;
  _final_step_type final_step;

   typedef  ::std_msgs::Int64_<ContainerAllocator>  _n_step_type;
  _n_step_type n_step;





  typedef boost::shared_ptr< ::walking_core_msgs::FootStep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walking_core_msgs::FootStep_<ContainerAllocator> const> ConstPtr;

}; // struct FootStep_

typedef ::walking_core_msgs::FootStep_<std::allocator<void> > FootStep;

typedef boost::shared_ptr< ::walking_core_msgs::FootStep > FootStepPtr;
typedef boost::shared_ptr< ::walking_core_msgs::FootStep const> FootStepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walking_core_msgs::FootStep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walking_core_msgs::FootStep_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walking_core_msgs::FootStep_<ContainerAllocator1> & lhs, const ::walking_core_msgs::FootStep_<ContainerAllocator2> & rhs)
{
  return lhs.contact == rhs.contact &&
    lhs.body_id == rhs.body_id &&
    lhs.final_step == rhs.final_step &&
    lhs.n_step == rhs.n_step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walking_core_msgs::FootStep_<ContainerAllocator1> & lhs, const ::walking_core_msgs::FootStep_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walking_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::FootStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::FootStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::FootStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::FootStep_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::FootStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::FootStep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walking_core_msgs::FootStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d0f09bb8a0492982eab7b79dd33028a";
  }

  static const char* value(const ::walking_core_msgs::FootStep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d0f09bb8a049298ULL;
  static const uint64_t static_value2 = 0x2eab7b79dd33028aULL;
};

template<class ContainerAllocator>
struct DataType< ::walking_core_msgs::FootStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walking_core_msgs/FootStep";
  }

  static const char* value(const ::walking_core_msgs::FootStep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walking_core_msgs::FootStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_core_msgs/Contact contact\n"
"std_msgs/Int64 body_id\n"
"std_msgs/Bool final_step\n"
"std_msgs/Int64 n_step\n"
"================================================================================\n"
"MSG: control_core_msgs/Contact\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Point offset\n"
"std_msgs/Float64 friction\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::walking_core_msgs::FootStep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walking_core_msgs::FootStep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contact);
      stream.next(m.body_id);
      stream.next(m.final_step);
      stream.next(m.n_step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FootStep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walking_core_msgs::FootStep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walking_core_msgs::FootStep_<ContainerAllocator>& v)
  {
    s << indent << "contact: ";
    s << std::endl;
    Printer< ::control_core_msgs::Contact_<ContainerAllocator> >::stream(s, indent + "  ", v.contact);
    s << indent << "body_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.body_id);
    s << indent << "final_step: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.final_step);
    s << indent << "n_step: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.n_step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKING_CORE_MSGS_MESSAGE_FOOTSTEP_H
