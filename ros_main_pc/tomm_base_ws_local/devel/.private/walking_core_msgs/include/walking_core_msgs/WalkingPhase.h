// Generated by gencpp from file walking_core_msgs/WalkingPhase.msg
// DO NOT EDIT!


#ifndef WALKING_CORE_MSGS_MESSAGE_WALKINGPHASE_H
#define WALKING_CORE_MSGS_MESSAGE_WALKINGPHASE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace walking_core_msgs
{
template <class ContainerAllocator>
struct WalkingPhase_
{
  typedef WalkingPhase_<ContainerAllocator> Type;

  WalkingPhase_()
    : phase(0)  {
    }
  WalkingPhase_(const ContainerAllocator& _alloc)
    : phase(0)  {
  (void)_alloc;
    }



   typedef uint8_t _phase_type;
  _phase_type phase;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PHASE_STANCE)
  #undef PHASE_STANCE
#endif
#if defined(_WIN32) && defined(PHASE_DOUBLESUPPORT)
  #undef PHASE_DOUBLESUPPORT
#endif
#if defined(_WIN32) && defined(PHASE_SINGLESUPPORT)
  #undef PHASE_SINGLESUPPORT
#endif

  enum {
    PHASE_STANCE = 0u,
    PHASE_DOUBLESUPPORT = 1u,
    PHASE_SINGLESUPPORT = 2u,
  };


  typedef boost::shared_ptr< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingPhase_

typedef ::walking_core_msgs::WalkingPhase_<std::allocator<void> > WalkingPhase;

typedef boost::shared_ptr< ::walking_core_msgs::WalkingPhase > WalkingPhasePtr;
typedef boost::shared_ptr< ::walking_core_msgs::WalkingPhase const> WalkingPhaseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walking_core_msgs::WalkingPhase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walking_core_msgs::WalkingPhase_<ContainerAllocator1> & lhs, const ::walking_core_msgs::WalkingPhase_<ContainerAllocator2> & rhs)
{
  return lhs.phase == rhs.phase;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walking_core_msgs::WalkingPhase_<ContainerAllocator1> & lhs, const ::walking_core_msgs::WalkingPhase_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walking_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1712835dbfb69f4b5728c67900acc6bf";
  }

  static const char* value(const ::walking_core_msgs::WalkingPhase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1712835dbfb69f4bULL;
  static const uint64_t static_value2 = 0x5728c67900acc6bfULL;
};

template<class ContainerAllocator>
struct DataType< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walking_core_msgs/WalkingPhase";
  }

  static const char* value(const ::walking_core_msgs::WalkingPhase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PHASE_STANCE=0\n"
"uint8 PHASE_DOUBLESUPPORT=1\n"
"uint8 PHASE_SINGLESUPPORT=2\n"
"uint8 phase\n"
;
  }

  static const char* value(const ::walking_core_msgs::WalkingPhase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.phase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingPhase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walking_core_msgs::WalkingPhase_<ContainerAllocator>& v)
  {
    s << indent << "phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.phase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKING_CORE_MSGS_MESSAGE_WALKINGPHASE_H
