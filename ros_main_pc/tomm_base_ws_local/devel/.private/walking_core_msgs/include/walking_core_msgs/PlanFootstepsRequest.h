// Generated by gencpp from file walking_core_msgs/PlanFootstepsRequest.msg
// DO NOT EDIT!


#ifndef WALKING_CORE_MSGS_MESSAGE_PLANFOOTSTEPSREQUEST_H
#define WALKING_CORE_MSGS_MESSAGE_PLANFOOTSTEPSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace walking_core_msgs
{
template <class ContainerAllocator>
struct PlanFootstepsRequest_
{
  typedef PlanFootstepsRequest_<ContainerAllocator> Type;

  PlanFootstepsRequest_()
    : n_steps()
    , length()
    , lateral()
    , angle()  {
    }
  PlanFootstepsRequest_(const ContainerAllocator& _alloc)
    : n_steps(_alloc)
    , length(_alloc)
    , lateral(_alloc)
    , angle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int64_<ContainerAllocator>  _n_steps_type;
  _n_steps_type n_steps;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _length_type;
  _length_type length;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _lateral_type;
  _lateral_type lateral;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlanFootstepsRequest_

typedef ::walking_core_msgs::PlanFootstepsRequest_<std::allocator<void> > PlanFootstepsRequest;

typedef boost::shared_ptr< ::walking_core_msgs::PlanFootstepsRequest > PlanFootstepsRequestPtr;
typedef boost::shared_ptr< ::walking_core_msgs::PlanFootstepsRequest const> PlanFootstepsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator1> & lhs, const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.n_steps == rhs.n_steps &&
    lhs.length == rhs.length &&
    lhs.lateral == rhs.lateral &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator1> & lhs, const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walking_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d8147ed6e65a975ff8e2b53102cc02a";
  }

  static const char* value(const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d8147ed6e65a975ULL;
  static const uint64_t static_value2 = 0xff8e2b53102cc02aULL;
};

template<class ContainerAllocator>
struct DataType< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walking_core_msgs/PlanFootstepsRequest";
  }

  static const char* value(const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int64      n_steps\n"
"std_msgs/Float64    length\n"
"std_msgs/Float64    lateral\n"
"std_msgs/Float64    angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_steps);
      stream.next(m.length);
      stream.next(m.lateral);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanFootstepsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walking_core_msgs::PlanFootstepsRequest_<ContainerAllocator>& v)
  {
    s << indent << "n_steps: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.n_steps);
    s << indent << "length: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.length);
    s << indent << "lateral: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.lateral);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKING_CORE_MSGS_MESSAGE_PLANFOOTSTEPSREQUEST_H
