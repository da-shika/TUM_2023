// Generated by gencpp from file walking_core_msgs/WalkingStates.msg
// DO NOT EDIT!


#ifndef WALKING_CORE_MSGS_MESSAGE_WALKINGSTATES_H
#define WALKING_CORE_MSGS_MESSAGE_WALKINGSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <walking_core_msgs/WalkingPhase.h>
#include <control_core_msgs/BodyId.h>
#include <control_core_msgs/BodyId.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <walking_core_msgs/FootStep.h>
#include <walking_core_msgs/FootStep.h>
#include <walking_core_msgs/FootStep.h>

namespace walking_core_msgs
{
template <class ContainerAllocator>
struct WalkingStates_
{
  typedef WalkingStates_<ContainerAllocator> Type;

  WalkingStates_()
    : header()
    , phase()
    , stance_foot()
    , swing_foot()
    , elapsed()
    , left_foot_ratio()
    , cur_step()
    , target_step()
    , next_step()  {
    }
  WalkingStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , phase(_alloc)
    , stance_foot(_alloc)
    , swing_foot(_alloc)
    , elapsed(_alloc)
    , left_foot_ratio(_alloc)
    , cur_step(_alloc)
    , target_step(_alloc)
    , next_step(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::walking_core_msgs::WalkingPhase_<ContainerAllocator>  _phase_type;
  _phase_type phase;

   typedef  ::control_core_msgs::BodyId_<ContainerAllocator>  _stance_foot_type;
  _stance_foot_type stance_foot;

   typedef  ::control_core_msgs::BodyId_<ContainerAllocator>  _swing_foot_type;
  _swing_foot_type swing_foot;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _elapsed_type;
  _elapsed_type elapsed;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _left_foot_ratio_type;
  _left_foot_ratio_type left_foot_ratio;

   typedef  ::walking_core_msgs::FootStep_<ContainerAllocator>  _cur_step_type;
  _cur_step_type cur_step;

   typedef  ::walking_core_msgs::FootStep_<ContainerAllocator>  _target_step_type;
  _target_step_type target_step;

   typedef  ::walking_core_msgs::FootStep_<ContainerAllocator>  _next_step_type;
  _next_step_type next_step;





  typedef boost::shared_ptr< ::walking_core_msgs::WalkingStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walking_core_msgs::WalkingStates_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingStates_

typedef ::walking_core_msgs::WalkingStates_<std::allocator<void> > WalkingStates;

typedef boost::shared_ptr< ::walking_core_msgs::WalkingStates > WalkingStatesPtr;
typedef boost::shared_ptr< ::walking_core_msgs::WalkingStates const> WalkingStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walking_core_msgs::WalkingStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::walking_core_msgs::WalkingStates_<ContainerAllocator1> & lhs, const ::walking_core_msgs::WalkingStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.phase == rhs.phase &&
    lhs.stance_foot == rhs.stance_foot &&
    lhs.swing_foot == rhs.swing_foot &&
    lhs.elapsed == rhs.elapsed &&
    lhs.left_foot_ratio == rhs.left_foot_ratio &&
    lhs.cur_step == rhs.cur_step &&
    lhs.target_step == rhs.target_step &&
    lhs.next_step == rhs.next_step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::walking_core_msgs::WalkingStates_<ContainerAllocator1> & lhs, const ::walking_core_msgs::WalkingStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace walking_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walking_core_msgs::WalkingStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walking_core_msgs::WalkingStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walking_core_msgs::WalkingStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e12756d011ab43b51ff2b08d69aadcb4";
  }

  static const char* value(const ::walking_core_msgs::WalkingStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe12756d011ab43b5ULL;
  static const uint64_t static_value2 = 0x1ff2b08d69aadcb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walking_core_msgs/WalkingStates";
  }

  static const char* value(const ::walking_core_msgs::WalkingStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"WalkingPhase phase\n"
"control_core_msgs/BodyId stance_foot\n"
"control_core_msgs/BodyId swing_foot\n"
"std_msgs/Float64 elapsed\n"
"std_msgs/Float64 left_foot_ratio\n"
"FootStep cur_step\n"
"FootStep target_step\n"
"FootStep next_step\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: walking_core_msgs/WalkingPhase\n"
"uint8 PHASE_STANCE=0\n"
"uint8 PHASE_DOUBLESUPPORT=1\n"
"uint8 PHASE_SINGLESUPPORT=2\n"
"uint8 phase\n"
"================================================================================\n"
"MSG: control_core_msgs/BodyId\n"
"uint8 ID_LEFT_FOOT=0\n"
"uint8 ID_RIGHT_FOOT=1\n"
"uint8 ID_LEFT_HAND=2\n"
"uint8 ID_RIGHT_HAND=3\n"
"uint8 id\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: walking_core_msgs/FootStep\n"
"control_core_msgs/Contact contact\n"
"std_msgs/Int64 body_id\n"
"std_msgs/Bool final_step\n"
"std_msgs/Int64 n_step\n"
"================================================================================\n"
"MSG: control_core_msgs/Contact\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Polygon hull\n"
"geometry_msgs/Point offset\n"
"std_msgs/Float64 friction\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::walking_core_msgs::WalkingStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.phase);
      stream.next(m.stance_foot);
      stream.next(m.swing_foot);
      stream.next(m.elapsed);
      stream.next(m.left_foot_ratio);
      stream.next(m.cur_step);
      stream.next(m.target_step);
      stream.next(m.next_step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walking_core_msgs::WalkingStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walking_core_msgs::WalkingStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "phase: ";
    s << std::endl;
    Printer< ::walking_core_msgs::WalkingPhase_<ContainerAllocator> >::stream(s, indent + "  ", v.phase);
    s << indent << "stance_foot: ";
    s << std::endl;
    Printer< ::control_core_msgs::BodyId_<ContainerAllocator> >::stream(s, indent + "  ", v.stance_foot);
    s << indent << "swing_foot: ";
    s << std::endl;
    Printer< ::control_core_msgs::BodyId_<ContainerAllocator> >::stream(s, indent + "  ", v.swing_foot);
    s << indent << "elapsed: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.elapsed);
    s << indent << "left_foot_ratio: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.left_foot_ratio);
    s << indent << "cur_step: ";
    s << std::endl;
    Printer< ::walking_core_msgs::FootStep_<ContainerAllocator> >::stream(s, indent + "  ", v.cur_step);
    s << indent << "target_step: ";
    s << std::endl;
    Printer< ::walking_core_msgs::FootStep_<ContainerAllocator> >::stream(s, indent + "  ", v.target_step);
    s << indent << "next_step: ";
    s << std::endl;
    Printer< ::walking_core_msgs::FootStep_<ContainerAllocator> >::stream(s, indent + "  ", v.next_step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKING_CORE_MSGS_MESSAGE_WALKINGSTATES_H
