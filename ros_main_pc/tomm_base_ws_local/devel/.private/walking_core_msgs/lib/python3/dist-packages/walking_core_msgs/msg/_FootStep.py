# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from walking_core_msgs/FootStep.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_core_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class FootStep(genpy.Message):
  _md5sum = "9d0f09bb8a0492982eab7b79dd33028a"
  _type = "walking_core_msgs/FootStep"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """control_core_msgs/Contact contact
std_msgs/Int64 body_id
std_msgs/Bool final_step
std_msgs/Int64 n_step
================================================================================
MSG: control_core_msgs/Contact
geometry_msgs/Pose pose
geometry_msgs/Polygon hull
geometry_msgs/Point offset
std_msgs/Float64 friction
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Int64
int64 data
================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['contact','body_id','final_step','n_step']
  _slot_types = ['control_core_msgs/Contact','std_msgs/Int64','std_msgs/Bool','std_msgs/Int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contact,body_id,final_step,n_step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FootStep, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.contact is None:
        self.contact = control_core_msgs.msg.Contact()
      if self.body_id is None:
        self.body_id = std_msgs.msg.Int64()
      if self.final_step is None:
        self.final_step = std_msgs.msg.Bool()
      if self.n_step is None:
        self.n_step = std_msgs.msg.Int64()
    else:
      self.contact = control_core_msgs.msg.Contact()
      self.body_id = std_msgs.msg.Int64()
      self.final_step = std_msgs.msg.Bool()
      self.n_step = std_msgs.msg.Int64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.contact.pose.position.x, _x.contact.pose.position.y, _x.contact.pose.position.z, _x.contact.pose.orientation.x, _x.contact.pose.orientation.y, _x.contact.pose.orientation.z, _x.contact.pose.orientation.w))
      length = len(self.contact.hull.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact.hull.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4dqBq().pack(_x.contact.offset.x, _x.contact.offset.y, _x.contact.offset.z, _x.contact.friction.data, _x.body_id.data, _x.final_step.data, _x.n_step.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contact is None:
        self.contact = control_core_msgs.msg.Contact()
      if self.body_id is None:
        self.body_id = std_msgs.msg.Int64()
      if self.final_step is None:
        self.final_step = std_msgs.msg.Bool()
      if self.n_step is None:
        self.n_step = std_msgs.msg.Int64()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.contact.pose.position.x, _x.contact.pose.position.y, _x.contact.pose.position.z, _x.contact.pose.orientation.x, _x.contact.pose.orientation.y, _x.contact.pose.orientation.z, _x.contact.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact.hull.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.contact.hull.points.append(val1)
      _x = self
      start = end
      end += 49
      (_x.contact.offset.x, _x.contact.offset.y, _x.contact.offset.z, _x.contact.friction.data, _x.body_id.data, _x.final_step.data, _x.n_step.data,) = _get_struct_4dqBq().unpack(str[start:end])
      self.final_step.data = bool(self.final_step.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.contact.pose.position.x, _x.contact.pose.position.y, _x.contact.pose.position.z, _x.contact.pose.orientation.x, _x.contact.pose.orientation.y, _x.contact.pose.orientation.z, _x.contact.pose.orientation.w))
      length = len(self.contact.hull.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact.hull.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4dqBq().pack(_x.contact.offset.x, _x.contact.offset.y, _x.contact.offset.z, _x.contact.friction.data, _x.body_id.data, _x.final_step.data, _x.n_step.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contact is None:
        self.contact = control_core_msgs.msg.Contact()
      if self.body_id is None:
        self.body_id = std_msgs.msg.Int64()
      if self.final_step is None:
        self.final_step = std_msgs.msg.Bool()
      if self.n_step is None:
        self.n_step = std_msgs.msg.Int64()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.contact.pose.position.x, _x.contact.pose.position.y, _x.contact.pose.position.z, _x.contact.pose.orientation.x, _x.contact.pose.orientation.y, _x.contact.pose.orientation.z, _x.contact.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact.hull.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.contact.hull.points.append(val1)
      _x = self
      start = end
      end += 49
      (_x.contact.offset.x, _x.contact.offset.y, _x.contact.offset.z, _x.contact.friction.data, _x.body_id.data, _x.final_step.data, _x.n_step.data,) = _get_struct_4dqBq().unpack(str[start:end])
      self.final_step.data = bool(self.final_step.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4dqBq = None
def _get_struct_4dqBq():
    global _struct_4dqBq
    if _struct_4dqBq is None:
        _struct_4dqBq = struct.Struct("<4dqBq")
    return _struct_4dqBq
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
