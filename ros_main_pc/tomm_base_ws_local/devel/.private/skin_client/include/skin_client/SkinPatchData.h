// Generated by gencpp from file skin_client/SkinPatchData.msg
// DO NOT EDIT!


#ifndef SKIN_CLIENT_MESSAGE_SKINPATCHDATA_H
#define SKIN_CLIENT_MESSAGE_SKINPATCHDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skin_client
{
template <class ContainerAllocator>
struct SkinPatchData_
{
  typedef SkinPatchData_<ContainerAllocator> Type;

  SkinPatchData_()
    : prox()
    , force()
    , dist()  {
    }
  SkinPatchData_(const ContainerAllocator& _alloc)
    : prox(_alloc)
    , force(_alloc)
    , dist(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _prox_type;
  _prox_type prox;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _force_type;
  _force_type force;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::skin_client::SkinPatchData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skin_client::SkinPatchData_<ContainerAllocator> const> ConstPtr;

}; // struct SkinPatchData_

typedef ::skin_client::SkinPatchData_<std::allocator<void> > SkinPatchData;

typedef boost::shared_ptr< ::skin_client::SkinPatchData > SkinPatchDataPtr;
typedef boost::shared_ptr< ::skin_client::SkinPatchData const> SkinPatchDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skin_client::SkinPatchData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skin_client::SkinPatchData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skin_client::SkinPatchData_<ContainerAllocator1> & lhs, const ::skin_client::SkinPatchData_<ContainerAllocator2> & rhs)
{
  return lhs.prox == rhs.prox &&
    lhs.force == rhs.force &&
    lhs.dist == rhs.dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skin_client::SkinPatchData_<ContainerAllocator1> & lhs, const ::skin_client::SkinPatchData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skin_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::skin_client::SkinPatchData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skin_client::SkinPatchData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skin_client::SkinPatchData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skin_client::SkinPatchData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skin_client::SkinPatchData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skin_client::SkinPatchData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skin_client::SkinPatchData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "179ab063081e8357cb8a2a1174181125";
  }

  static const char* value(const ::skin_client::SkinPatchData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x179ab063081e8357ULL;
  static const uint64_t static_value2 = 0xcb8a2a1174181125ULL;
};

template<class ContainerAllocator>
struct DataType< ::skin_client::SkinPatchData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skin_client/SkinPatchData";
  }

  static const char* value(const ::skin_client::SkinPatchData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skin_client::SkinPatchData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] prox\n"
"float64[] force\n"
"float64[] dist\n"
;
  }

  static const char* value(const ::skin_client::SkinPatchData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skin_client::SkinPatchData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prox);
      stream.next(m.force);
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkinPatchData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skin_client::SkinPatchData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skin_client::SkinPatchData_<ContainerAllocator>& v)
  {
    s << indent << "prox[]" << std::endl;
    for (size_t i = 0; i < v.prox.size(); ++i)
    {
      s << indent << "  prox[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.prox[i]);
    }
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "dist[]" << std::endl;
    for (size_t i = 0; i < v.dist.size(); ++i)
    {
      s << indent << "  dist[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKIN_CLIENT_MESSAGE_SKINPATCHDATA_H
