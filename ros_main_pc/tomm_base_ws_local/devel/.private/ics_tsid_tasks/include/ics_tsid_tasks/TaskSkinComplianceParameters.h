// *********************************************************
//
// File autogenerated for the ics_tsid_tasks package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <control_core/ros/parameters.h>
#include <rosparam_handler/utilities_std.h>
#include <control_core/types.h>
#include <rosparam_handler/utilities_eigen.h>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <ics_tsid_tasks/TaskSkinComplianceConfig.h>
#include <dynamic_reconfigure/server.h>
namespace ics_tsid_tasks
{
    typedef dynamic_reconfigure::Server<TaskSkinComplianceConfig> TaskSkinComplianceServer;
}
#else
namespace ics_tsid_tasks
{
    struct TaskSkinComplianceConfig{};
    struct TaskSkinComplianceServer{};
}
#endif


namespace ics_tsid_tasks {

/// \brief Parameter struct generated by rosparam_handler
class TaskSkinComplianceParameters : public cc::Parameters {

public:
  typedef cc::Parameters Base;
  using Config = TaskSkinComplianceConfig;

public:
  TaskSkinComplianceParameters()
  : Base(), config_updated_once_(false)
  {
    addToList();
  }

  TaskSkinComplianceParameters(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="")
  : Base(private_node_handle, private_namespace), config_updated_once_(false) 
  {
    addToList();
  }

  ~TaskSkinComplianceParameters() { }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer() {
    bool success = true;
    success &= utilities_eigen::getParam(private_namespace_ + "kp", kp);
    success &= utilities_eigen::getParam(private_namespace_ + "kd", kd);
    success &= utilities_std::getParam(private_namespace_ + "kp_factor", kp_factor, double{1.0});
    success &= utilities_std::getParam(private_namespace_ + "kd_factor", kd_factor, double{1.0});
    success &= utilities_std::getParam(private_namespace_ + "alpha_proximity", alpha_proximity, double{0.5});
    success &= utilities_std::getParam(private_namespace_ + "fd_normal", fd_normal, double{0.0});
    utilities_eigen::testMin(private_namespace_ + "kp", kp, 0.0);
    utilities_eigen::testMax(private_namespace_ + "kp", kp, 1000);
    utilities_eigen::testMin(private_namespace_ + "kd", kd, 0.0);
    utilities_eigen::testMax(private_namespace_ + "kd", kd, 1000);
    utilities_std::testMin(private_namespace_ + "kp_factor", kp_factor, 0.0);
    utilities_std::testMax(private_namespace_ + "kp_factor", kp_factor, 5.0);
    utilities_std::testMin(private_namespace_ + "kd_factor", kd_factor, 0.0);
    utilities_std::testMax(private_namespace_ + "kd_factor", kd_factor, 5.0);
    utilities_std::testMin(private_namespace_ + "alpha_proximity", alpha_proximity, 0.0);
    utilities_std::testMax(private_namespace_ + "alpha_proximity", alpha_proximity, 1.0);
    utilities_std::testMin(private_namespace_ + "fd_normal", fd_normal, -1.6);
    utilities_std::testMax(private_namespace_ + "fd_normal", fd_normal, 1.5);
    if(!success){
      missingParamsWarning();
      ROS_ERROR("RosparamHandler: GetParam could not retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
    is_loaded_ = true;
    return success;
  }

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  bool fromParamServer(const ros::NodeHandle& private_node_handle, const std::string& private_namespace="") {
    private_namespace_ = rosparam_handler::joinNamespaces({private_node_handle.getNamespace(), private_namespace});
    node_name_ = rosparam_handler::getNodeName(private_node_handle);
    is_init_ = true;
    return fromParamServer();
  }

  /// \brief Set parameters on ROS parameter server.
  bool toParamServer() {
  utilities_eigen::setParam(private_namespace_ + "kp",kp);
  utilities_eigen::setParam(private_namespace_ + "kd",kd);
  utilities_std::setParam(private_namespace_ + "kp_factor",kp_factor);
  utilities_std::setParam(private_namespace_ + "kd_factor",kd_factor);
  utilities_std::setParam(private_namespace_ + "alpha_proximity",alpha_proximity);
  utilities_std::setParam(private_namespace_ + "fd_normal",fd_normal);
    return true;        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
    utilities_eigen::from_string(config.kp_str, kp);
    utilities_eigen::testMin(private_namespace_ + "kp", kp, 0.0);
    utilities_eigen::testMax(private_namespace_ + "kp", kp, 1000);
    utilities_eigen::from_string(config.kd_str, kd);
    utilities_eigen::testMin(private_namespace_ + "kd", kd, 0.0);
    utilities_eigen::testMax(private_namespace_ + "kd", kd, 1000);
    kp_factor = config.kp_factor;
    kd_factor = config.kd_factor;
    alpha_proximity = config.alpha_proximity;
    fd_normal = config.fd_normal;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  void toConfig(Config& config) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
       config.kp_str = utilities_eigen::to_string(kp);
   config.kd_str = utilities_eigen::to_string(kd);
   config.kp_factor = kp_factor;
   config.kd_factor = kd_factor;
   config.alpha_proximity = alpha_proximity;
   config.fd_normal = fd_normal;
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  Config asConfig() const {
    Config config;
#ifdef DYNAMIC_RECONFIGURE_FOUND
       config.kp_str = utilities_eigen::to_string(kp);
   config.kd_str = utilities_eigen::to_string(kd);
   config.kp_factor = kp_factor;
   config.kd_factor = kd_factor;
   config.alpha_proximity = alpha_proximity;
   config.fd_normal = fd_normal;
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
    return config;
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void updateConfig(Config& config, const uint32_t level = 0) {
#ifdef DYNAMIC_RECONFIGURE_FOUND
  if(!config_updated_once_)
  {
    // first update, override config
    config_updated_once_ = true;
    toConfig(config);
  }
  else
  {
    // subsequent update, read from config
    fromConfig(config, level);
  }
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So updateConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const TaskSkinComplianceParameters& p)
  {
    os << "[" << p.node_name_ << "]\nNode " << p.node_name_ << " has the following parameters:\n"
      << "	" << p.private_namespace_ << "kp:" << utilities_eigen::to_string(p.kp) << "\n"
      << "	" << p.private_namespace_ << "kd:" << utilities_eigen::to_string(p.kd) << "\n"
      << "	" << p.private_namespace_ << "kp_factor:" << p.kp_factor << "\n"
      << "	" << p.private_namespace_ << "kd_factor:" << p.kd_factor << "\n"
      << "	" << p.private_namespace_ << "alpha_proximity:" << p.alpha_proximity << "\n"
      << "	" << p.private_namespace_ << "fd_normal:" << p.fd_normal << "\n"
;
    return os;
  }

public:
    cc::VectorX kp; /*!<  */
  cc::VectorX kd; /*!<  */
  double kp_factor; /*!<  */
  double kd_factor; /*!<  */
  double alpha_proximity; /*!<  */
  double fd_normal; /*!<  */

private:
  bool config_updated_once_;
  /// \brief Add them to the parmeter list
  void addToList() {
        Base::addReference("kp", kp);
    Base::addReference("kd", kd);
    Base::addReference("kp_factor", kp_factor);
    Base::addReference("kd_factor", kd_factor);
    Base::addReference("alpha_proximity", alpha_proximity);
    Base::addReference("fd_normal", fd_normal);
  }

  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << node_name_ << "]\nThe following parameters do not have default values and need to be specified:\n"
      << "	" << private_namespace_ << "kp" << " (cc::VectorX) \n"
      << "	" << private_namespace_ << "kd" << " (cc::VectorX) \n"
    );
  }
};

} // namespace ics_tsid_tasks
